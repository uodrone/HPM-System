{"version":3,"file":"app.js","mappings":"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","sources":["webpack://hpm-system/webpack/bootstrap","webpack://hpm-system/webpack/runtime/make namespace object","webpack://hpm-system/./wwwroot/js/UserValidator.js","webpack://hpm-system/./wwwroot/js/GetDataFromUserService.js","webpack://hpm-system/./wwwroot/js/AuthManager.js","webpack://hpm-system/./wwwroot/css/variables.css?94ea","webpack://hpm-system/./wwwroot/css/profile-group.css?bad9","webpack://hpm-system/./wwwroot/css/main.css?2fc0","webpack://hpm-system/./wwwroot/css/grid.css?ea29","webpack://hpm-system/./wwwroot/css/card.css?4344","webpack://hpm-system/./wwwroot/css/btn.css?6b8f"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","class UserValidator {\r\n    constructor() {\r\n        // Разрешенные буквы в российских номерах (совпадают с латинскими)\r\n        this.allowedLetters = 'АВЕКМНОРСТУХ';\r\n\r\n        // Коды регионов России\r\n        this.validRegionCodes = [\r\n            // Основные регионы\r\n            '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',\r\n            '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',\r\n            '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',\r\n            '31', '32', '33', '34', '35', '36', '37', '38', '39', '40',\r\n            '41', '42', '43', '44', '45', '46', '47', '48', '49', '50',\r\n            '51', '52', '53', '54', '55', '56', '57', '58', '59', '60',\r\n            '61', '62', '63', '64', '65', '66', '67', '68', '69', '70',\r\n            '71', '72', '73', '74', '75', '76', '77', '78', '79', '80',\r\n            '81', '82', '83', '84', '85', '86', '87', '88', '89', '90',\r\n            '91', '92', '93', '94', '95', '96', '97', '98', '99',\r\n            // Трёхзначные коды для крупных регионов\r\n            '102', '113', '116', '117', '118', '119', '121', '122', '123',\r\n            '124', '125', '126', '134', '136', '138', '142', '150', '152',\r\n            '154', '159', '161', '163', '164', '173', '174', '177', '178',\r\n            '186', '190', '196', '197', '198', '199', '702', '716', '750',\r\n            '761', '763', '774', '777', '790', '799'\r\n        ];\r\n\r\n        // Запрещенные комбинации\r\n        this.forbiddenCombinations = [\r\n            /.*ХУ[ЙИ].*/,\r\n            /.*БЛ[ЯА].*/,\r\n            /.*П[ИИ]З.*/,\r\n            /.*МУД.*/,\r\n            /.*ГОВ.*/\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Валидация имени/фамилии/отчества\r\n     */\r\n    validateName(name, fieldName, required = true) {\r\n        if (!name || name.trim() === '') {\r\n            if (required) {\r\n                return { isValid: false, error: `${fieldName} обязательно для заполнения` };\r\n            }\r\n            return { isValid: true };\r\n        }\r\n\r\n        if (name.length > 50) {\r\n            return { isValid: false, error: `${fieldName} не может быть длиннее 50 символов` };\r\n        }\r\n\r\n        if (!/^[а-яё\\s\\-']+$/i.test(name)) {\r\n            return { isValid: false, error: `${fieldName} должно содержать только русские буквы, пробелы, дефисы и апострофы` };\r\n        }\r\n\r\n        // Проверка на слишком много пробелов подряд\r\n        if (/\\s{2,}/.test(name)) {\r\n            return { isValid: false, error: `${fieldName} не должно содержать несколько пробелов подряд` };\r\n        }\r\n\r\n        // Проверка на пробелы в начале/конце\r\n        if (name !== name.trim()) {\r\n            return { isValid: false, error: `${fieldName} не должно начинаться или заканчиваться пробелом` };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация даты рождения\r\n     */\r\n    validateBirthday(birthday) {\r\n        if (!birthday) {\r\n            return { isValid: true }; // Дата рождения необязательна\r\n        }\r\n\r\n        const birthDate = new Date(birthday);\r\n        const today = new Date();\r\n        const minDate = new Date(today.getFullYear() - 120, today.getMonth(), today.getDate());\r\n        const maxDate = new Date(today.getFullYear() - 14, today.getMonth(), today.getDate()); // Минимальный возраст 14 лет\r\n\r\n        if (isNaN(birthDate.getTime())) {\r\n            return { isValid: false, error: 'Неверный формат даты' };\r\n        }\r\n\r\n        if (birthDate > today) {\r\n            return { isValid: false, error: 'Дата рождения не может быть в будущем' };\r\n        }\r\n\r\n        if (birthDate < minDate) {\r\n            return { isValid: false, error: 'Дата рождения не может быть более 120 лет назад' };\r\n        }\r\n\r\n        if (birthDate > maxDate) {\r\n            return { isValid: false, error: 'Минимальный возраст должен быть 14 лет' };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация номера телефона\r\n     */\r\n    validatePhoneNumber(phone) {\r\n        if (!phone || phone.trim() === '') {\r\n            return { isValid: false, error: 'Номер телефона обязателен для заполнения' };\r\n        }\r\n\r\n        // Убираем все символы кроме цифр и +\r\n        const cleanPhone = phone.replace(/[\\s\\-\\(\\)]/g, '');\r\n\r\n        // Различные форматы российских номеров\r\n        const phonePatterns = [\r\n            /^(\\+7|8)\\d{10}$/,           // +7XXXXXXXXXX или 8XXXXXXXXXX\r\n            /^\\+7\\d{10}$/,               // +7XXXXXXXXXX\r\n            /^8\\d{10}$/,                 // 8XXXXXXXXXX\r\n            /^7\\d{10}$/                  // 7XXXXXXXXXX\r\n        ];\r\n\r\n        let isValidFormat = false;\r\n        for (const pattern of phonePatterns) {\r\n            if (pattern.test(cleanPhone)) {\r\n                isValidFormat = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!isValidFormat) {\r\n            return { isValid: false, error: 'Неверный формат номера телефона. Используйте российский формат' };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация email\r\n     */\r\n    validateEmail(email) {\r\n        if (!email || email.trim() === '') {\r\n            return { isValid: false, error: 'Email обязателен для заполнения' };\r\n        }\r\n\r\n        if (email.length > 100) {\r\n            return { isValid: false, error: 'Email не может быть длиннее 100 символов' };\r\n        }\r\n\r\n        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n        if (!emailRegex.test(email)) {\r\n            return { isValid: false, error: 'Неверный формат email' };\r\n        }\r\n\r\n        // Проверка на запрещенные символы в локальной части\r\n        const localPart = email.split('@')[0];\r\n        if (localPart.startsWith('.') || localPart.endsWith('.') || localPart.includes('..')) {\r\n            return { isValid: false, error: 'Неверный формат email' };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация номера автомобиля\r\n     */\r\n    validateCarNumber(number) {\r\n        if (!number || number.trim() === '') {\r\n            return { isValid: false, error: 'Номер автомобиля обязателен' };\r\n        }\r\n\r\n        const cleanNumber = number.replace(/[\\s\\-]/g, '').toUpperCase();\r\n\r\n        // Проверка длины\r\n        if (cleanNumber.length < 8 || cleanNumber.length > 9) {\r\n            return { isValid: false, error: 'Неверная длина номера (должно быть 8-9 символов)' };\r\n        }\r\n\r\n        // Различные форматы российских номеров\r\n        const patterns = [\r\n            { pattern: /^[АВЕКМНОРСТУХ]\\d{3}[АВЕКМНОРСТУХ]{2}\\d{2,3}$/, type: 'стандартный' },\r\n            { pattern: /^[АВЕКМНОРСТУХ]{2}\\d{3}[АВЕКМНОРСТУХ]\\d{2,3}$/, type: 'такси' },\r\n            { pattern: /^[АВЕКМНОРСТУХ]{2}\\d{4}\\d{2,3}$/, type: 'прицеп' },\r\n            { pattern: /^\\d{4}[АВЕКМНОРСТУХ]{2}\\d{2,3}$/, type: 'мотоцикл' },\r\n            { pattern: /^Т\\d{3}[АВЕКМНОРСТУХ]{2}\\d{2,3}$/, type: 'транзит' }\r\n        ];\r\n\r\n        let isValidFormat = false;\r\n        for (const { pattern } of patterns) {\r\n            if (pattern.test(cleanNumber)) {\r\n                isValidFormat = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!isValidFormat) {\r\n            return { isValid: false, error: 'Неверный формат российского номера' };\r\n        }\r\n\r\n        // Проверка кода региона\r\n        const regionCode = cleanNumber.slice(-3);\r\n        const twoDigitCode = regionCode.slice(-2);\r\n        const threeDigitCode = regionCode;\r\n\r\n        if (!this.validRegionCodes.includes(twoDigitCode) && !this.validRegionCodes.includes(threeDigitCode)) {\r\n            return { isValid: false, error: 'Неверный код региона' };\r\n        }\r\n\r\n        // Проверка на запрещенные комбинации\r\n        for (const forbidden of this.forbiddenCombinations) {\r\n            if (forbidden.test(cleanNumber)) {\r\n                return { isValid: false, error: 'Недопустимая комбинация символов в номере' };\r\n            }\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация марки/модели автомобиля\r\n     */\r\n    validateCarBrand(value, fieldName) {\r\n        if (!value || value.trim() === '') {\r\n            return { isValid: true }; // Необязательное поле\r\n        }\r\n\r\n        if (value.length > 100) {\r\n            return { isValid: false, error: `${fieldName} не может быть длиннее 100 символов` };\r\n        }\r\n\r\n        if (!/^[а-яёa-z0-9\\s\\-._]+$/i.test(value)) {\r\n            return { isValid: false, error: `${fieldName} должна содержать только буквы, цифры, пробелы, дефисы, точки и подчеркивания` };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация цвета автомобиля\r\n     */\r\n    validateCarColor(color) {\r\n        if (!color || color.trim() === '') {\r\n            return { isValid: true }; // Необязательное поле\r\n        }\r\n\r\n        if (color.length > 50) {\r\n            return { isValid: false, error: 'Цвет не может быть длиннее 50 символов' };\r\n        }\r\n\r\n        if (!/^[а-яёa-z\\s\\-]+$/i.test(color)) {\r\n            return { isValid: false, error: 'Цвет должен содержать только буквы, пробелы и дефисы' };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация одного автомобиля\r\n     */\r\n    validateCar(car) {\r\n        const errors = {};\r\n        let isValid = true;\r\n\r\n        // Валидация марки\r\n        const markValidation = this.validateCarBrand(car.mark, 'Марка');\r\n        if (!markValidation.isValid) {\r\n            errors.mark = markValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        // Валидация модели\r\n        const modelValidation = this.validateCarBrand(car.model, 'Модель');\r\n        if (!modelValidation.isValid) {\r\n            errors.model = modelValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        // Валидация цвета\r\n        const colorValidation = this.validateCarColor(car.color);\r\n        if (!colorValidation.isValid) {\r\n            errors.color = colorValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        // Валидация номера\r\n        const numberValidation = this.validateCarNumber(car.number);\r\n        if (!numberValidation.isValid) {\r\n            errors.number = numberValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        return { isValid, errors };\r\n    }\r\n\r\n    /**\r\n     * Проверка уникальности номеров автомобилей\r\n     */\r\n    validateUniqueCarNumbers(cars) {\r\n        const numbers = cars\r\n            .map(car => car.number?.replace(/[\\s\\-]/g, '').toUpperCase())\r\n            .filter(Boolean);\r\n\r\n        const duplicates = [];\r\n        const seen = new Set();\r\n\r\n        numbers.forEach((number, index) => {\r\n            if (seen.has(number)) {\r\n                duplicates.push(index);\r\n            } else {\r\n                seen.add(number);\r\n                // Также добавляем индекс первого вхождения дубликата\r\n                const firstIndex = numbers.indexOf(number);\r\n                if (firstIndex !== index && !duplicates.includes(firstIndex)) {\r\n                    duplicates.push(firstIndex);\r\n                }\r\n            }\r\n        });\r\n\r\n        return duplicates;\r\n    }\r\n\r\n    /**\r\n     * Полная валидация данных пользователя\r\n     */\r\n    validateUserData(userData) {\r\n        const errors = {\r\n            user: {},\r\n            cars: []\r\n        };\r\n        let isValid = true;\r\n\r\n        // Валидация данных пользователя\r\n        const firstNameValidation = this.validateName(userData.firstName, 'Имя', true);\r\n        if (!firstNameValidation.isValid) {\r\n            errors.user.firstName = firstNameValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const lastNameValidation = this.validateName(userData.lastName, 'Фамилия', true);\r\n        if (!lastNameValidation.isValid) {\r\n            errors.user.lastName = lastNameValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const patronymicValidation = this.validateName(userData.patronymic, 'Отчество', false);\r\n        if (!patronymicValidation.isValid) {\r\n            errors.user.patronymic = patronymicValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const birthdayValidation = this.validateBirthday(userData.birthday);\r\n        if (!birthdayValidation.isValid) {\r\n            errors.user.birthday = birthdayValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const phoneValidation = this.validatePhoneNumber(userData.phoneNumber);\r\n        if (!phoneValidation.isValid) {\r\n            errors.user.phoneNumber = phoneValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const emailValidation = this.validateEmail(userData.email);\r\n        if (!emailValidation.isValid) {\r\n            errors.user.email = emailValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        // Валидация автомобилей\r\n        if (userData.cars && userData.cars.length > 0) {\r\n            userData.cars.forEach((car, index) => {\r\n                const carValidation = this.validateCar(car);\r\n                if (!carValidation.isValid) {\r\n                    errors.cars[index] = carValidation.errors;\r\n                    isValid = false;\r\n                }\r\n            });\r\n\r\n            // Проверка уникальности номеров\r\n            const duplicateIndexes = this.validateUniqueCarNumbers(userData.cars);\r\n            duplicateIndexes.forEach(index => {\r\n                if (!errors.cars[index]) errors.cars[index] = {};\r\n                errors.cars[index].number = 'Номер автомобиля должен быть уникальным';\r\n                isValid = false;\r\n            });\r\n        }\r\n\r\n        return {\r\n            isValid,\r\n            errors\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Форматирование номера автомобиля\r\n     */\r\n    formatCarNumber(input) {\r\n        let value = input.value.replace(/[^а-яёА-ЯЁ0-9ТтTt]/g, '').toUpperCase();\r\n\r\n        // Заменяем русские буквы на допустимые\r\n        const letterMap = {\r\n            'А': 'А', 'В': 'В', 'Е': 'Е', 'К': 'К', 'М': 'М', 'Н': 'Н',\r\n            'О': 'О', 'Р': 'Р', 'С': 'С', 'Т': 'Т', 'У': 'У', 'Х': 'Х',\r\n            'T': 'Т' // Латинская T заменяется на русскую Т\r\n        };\r\n\r\n        value = value.split('').map(char => letterMap[char] || char).join('');\r\n\r\n        // Ограничиваем длину\r\n        if (value.length > 9) {\r\n            value = value.slice(0, 9);\r\n        }\r\n\r\n        input.value = value;\r\n    }\r\n\r\n    /**\r\n     * Форматирование номера телефона\r\n     */\r\n    formatPhoneNumber(input) {\r\n        let value = input.value.replace(/\\D/g, '');\r\n\r\n        if (value.startsWith('8') && value.length > 1) {\r\n            value = '7' + value.slice(1);\r\n        }\r\n\r\n        if (value.startsWith('7') && value.length <= 11) {\r\n            const formatted = value.replace(/^7(\\d{3})(\\d{3})(\\d{2})(\\d{2})/, '+7 ($1) $2-$3-$4');\r\n            input.value = formatted;\r\n        } else if (value.length <= 10) {\r\n            const formatted = value.replace(/^(\\d{3})(\\d{3})(\\d{2})(\\d{2})/, '+7 ($1) $2-$3-$4');\r\n            input.value = formatted;\r\n        }\r\n    }\r\n}","class UserProfile {\r\n    constructor () {\r\n        this.userApiAddress = 'http://localhost:55680';\r\n    }\r\n\r\n    async GetUserById(userId) {\r\n        try {\r\n            const response = await fetch(`${this.userApiAddress}/api/Users/${userId}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            const data = await response.json();\r\n            console.log(`Пользователь ${userId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения пользователя ${userId}:`, error);\r\n        }\r\n    }\r\n\r\n    async getCarsByUserId(userId) {\r\n        try {\r\n            const response = await fetch(`${this.userApiAddress}/api/Cars/by-user/${userId}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            const data = await response.json();\r\n            console.log(`Автомобили пользователя ${userId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения автомобилей пользователя ${userId}:`, error);\r\n        }\r\n    }\r\n\r\n    async InsertUserDataToCardOnMainPage (userId) {\r\n        const userIdLinks = document.querySelectorAll('a.user-link[data-user-id]');\r\n        userIdLinks.forEach(element => {\r\n            const link = element.href;\r\n            element.href = `/user/${userId}`;\r\n        });\r\n\r\n        try {\r\n            await this.GetUserById(userId).then(user => {\r\n                \r\n                const fullName = document.querySelector('[data-user-fullname]');\r\n                const phone = document.querySelector('[data-user-phone]')\r\n                const carsCount = document.querySelector('[data-user-carslist]');\r\n\r\n                \r\n                fullName.textContent = `${user.firstName} ${user.lastName} ${user.patronymic}`;\r\n                phone.textContent = user.phoneNumber;\r\n\r\n                if (user.cars.length == 0) {\r\n                    carsCount.remove();\r\n                } else if (user.cars.length == 1) {\r\n                    const car = user.cars[0];\r\n\r\n                    carsCount.textContent = `${car.color} ${car.mark} ${car.model}, ${car.number}`;\r\n                } else {\r\n                    carsCount.textContent = `${user.cars.length} машины`;\r\n                }\r\n            }).catch(error => {\r\n                console.error('Ошибка получения данных пользователя:', error);\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async InsertUserDataToProfile (userId) {\r\n        try {\r\n            await this.GetUserById(userId).then(user => {\r\n                const setValue = (id, value) => {\r\n                    const element = document.getElementById(id);\r\n                    if (element) {\r\n                        // Специальная обработка для даты рождения\r\n                        if (id === 'birthday' && value) {\r\n                            // Преобразуем ISO строку в формат YYYY-MM-DD\r\n                            const date = new Date(value);\r\n                            const year = date.getFullYear();\r\n                            const month = String(date.getMonth() + 1).padStart(2, '0');\r\n                            const day = String(date.getDate()).padStart(2, '0');\r\n                            element.value = `${year}-${month}-${day}`;\r\n                        } else {\r\n                            element.value = value !== null && value !== '' ? value : '';\r\n                        }\r\n                    }\r\n                };\r\n                \r\n                setValue('firstName', user.firstName);\r\n                setValue('lastName', user.lastName);\r\n                setValue('patronymic', user.patronymic);\r\n                setValue('birthday', user.birthday);\r\n                setValue('phoneNumber', user.phoneNumber);\r\n                setValue('email', user.email);  \r\n                \r\n                user.cars.forEach(car => {\r\n                    this.SetUserCarInProfile(car);\r\n                });\r\n               \r\n            }).catch(error => {\r\n                console.error('Ошибка получения данных пользователя:', error);\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    SetUserCarInProfile (car) {\r\n        const carTemplate = `\r\n            <div class=\"car\" data-car-id=\"${car.id}\">\r\n                <div class=\"form-group d-none\">\r\n                    <input type=\"text\" placeholder=\" \" name=\"car-id\" id=\"car-id-${car.id}\" value=\"${car.id}\" />\r\n                    <label for=\"car-id-${car.id}\">id-машины</label>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input type=\"text\" placeholder=\" \" name=\"mark\" id=\"mark-${car.id}\" value=\"${car.mark}\" />\r\n                    <label for=\"mark-${car.id}\">Марка</label>\r\n                    <div class=\"error invisible\" data-error=\"mark\">Неверная марка машины</div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input type=\"text\" placeholder=\" \" name=\"model\" id=\"model-${car.id}\" value=\"${car.model}\" />\r\n                    <label for=\"model-${car.id}\">Модель</label>\r\n                    <div class=\"error invisible\" data-error=\"model\">Неверная модель машины</div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input type=\"text\" placeholder=\" \" name=\"color\" id=\"color-${car.id}\" value=\"${car.color}\" />\r\n                    <label for=\"color-${car.id}\">Модель</label>\r\n                    <div class=\"error invisible\" data-error=\"firstName\">Неверная модель машины</div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input type=\"text\" placeholder=\" \" name=\"number\" id=\"number-${car.id}\" value=\"${car.number}\" />\r\n                    <label for=\"number-${car.id}\">Номер</label>\r\n                    <div class=\"error invisible\" data-error=\"number\">Неверный номер машины</div>\r\n                </div>\r\n                <div class=\"form-group d-none\">\r\n                    <input type=\"text\" placeholder=\" \" name=\"car-user-id\" id=\"car-user-id-${car.id}\" value=\"${car.userId}\" />\r\n                    <label for=\"car-user-id-${car.id}\">id пользователя</label>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        const carsList = document.querySelector('.cars-list');\r\n        if (carsList) {\r\n            carsList.insertAdjacentHTML('beforeend', carTemplate);\r\n        }\r\n    }\r\n\r\n    collectUserDataFromProfile() {\r\n        let userData = {};\r\n        let carsData = [];\r\n\r\n        // собираем данные по машинам\r\n        const cars = document.querySelectorAll('.cars-list .car');\r\n\r\n        cars.forEach(car => {\r\n            const carId = car.dataset.carId || car.querySelector('input[name=\"car-id\"]')?.value || null;\r\n            const userId = car.querySelector('input[name=\"car-user-id\"]')?.value || null;\r\n            \r\n            const carData = {\r\n                id: carId ? parseInt(carId) : null,\r\n                mark: car.querySelector('input[name=\"mark\"]')?.value || '',\r\n                model: car.querySelector('input[name=\"model\"]')?.value || '',\r\n                color: car.querySelector('input[name=\"color\"]')?.value || '',\r\n                number: car.querySelector('input[name=\"number\"]')?.value || '',\r\n                userId: userId\r\n            };\r\n            \r\n            carsData.push(carData);\r\n        });\r\n        \r\n        //Собираем данные по пользователю\r\n        const userProfileInputs = document.querySelectorAll('.profile-group[data-group=\"user\"] input');\r\n        userProfileInputs.forEach(input => {\r\n            const inputKey = input.id;\r\n            let inputValue = input.value;\r\n\r\n            // Обработка даты рождения\r\n            if (inputKey === 'birthday' && inputValue) {\r\n                // Преобразуем дату в формат ISO с UTC\r\n                let date = new Date(inputValue);\r\n                // Устанавливаем время в 00:00:00 и конвертируем в UTC\r\n                date.setHours(0, 0, 0, 0);\r\n                inputValue = date.toISOString();\r\n            }\r\n\r\n            userData[inputKey] = inputValue;\r\n        });\r\n\r\n        userData.cars = carsData;\r\n        return userData;\r\n    }\r\n\r\n    async updateUserToDB (id, userData) {        \r\n        try {\r\n            const response = await fetch(`${this.userApiAddress}/api/Users/${id}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ ...userData, id })\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            console.log(`Пользователь ${id} обновлён`);\r\n        } catch (error) {\r\n            console.error(`Ошибка обновления пользователя ${id}:`, error);\r\n        }\r\n    }\r\n}\r\n\r\ndocument.addEventListener('authStateChanged', () => {\r\n    const { isAuthenticated, userData } = event.detail;\r\n\r\n    if (isAuthenticated && userData) {\r\n        const userProfile = new UserProfile();\r\n        const userId = window.authManager.userData.userId;\r\n\r\n        if (window.location.pathname == '/') {\r\n            userProfile.InsertUserDataToCardOnMainPage(userId);\r\n        }\r\n        \r\n        if (document.getElementById('user-profile')) {\r\n            userProfile.InsertUserDataToProfile (userId);\r\n\r\n            document.querySelector(`.btn[data-action=\"save-user-data\"]`).addEventListener('click', () => {\r\n                userProfile.updateUserToDB(window.authManager.userData.userId, userProfile.collectUserDataFromProfile());\r\n            })\r\n        }\r\n    }\r\n});","class AuthManager {\r\n    constructor() {\r\n        this.tokenKey = 'hpm_auth_token';\r\n        this.userDataKey = 'hpm_user_data';\r\n        this.authApiUrl = '/api/auth';\r\n        this.isAuthenticated = false;\r\n        this.userData = null;\r\n\r\n        // Автоматически инициализируем при загрузке\r\n        this.initialize();\r\n    }\r\n\r\n    /**\r\n     * Инициализация менеджера аутентификации\r\n     */\r\n    async initialize() {\r\n        // Проверяем наличие кода аутентификации в URL\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const authCode = urlParams.get('auth');\r\n\r\n        if (authCode) {\r\n            console.log('Найден код аутентификации в URL');\r\n            await this.exchangeAuthCode(authCode);\r\n\r\n            // Удаляем код из URL после обработки\r\n            this.clearAuthCodeFromUrl();\r\n        } else {\r\n            // Проверяем сохраненный токен\r\n            await this.checkStoredToken();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Обменивает код аутентификации на токен\r\n     */\r\n    async exchangeAuthCode(authCode) {\r\n        try {\r\n            const response = await fetch(`${this.authApiUrl}/exchange-code`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ authCode: authCode })\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok && result.isAuthenticated) {\r\n                this.setAuthData(result.token, {\r\n                    userId: result.userId,\r\n                    email: result.email,\r\n                    phoneNumber: result.phoneNumber\r\n                });\r\n\r\n                console.log('✅ Авторизация успешна');\r\n                this.showNotification('Добро пожаловать!', 'success');\r\n            } else {\r\n                console.warn('❌ Ошибка при обмене кода аутентификации:', result.message);\r\n                this.clearAuthData();\r\n                this.showNotification(result.message || 'Ошибка авторизации', 'error');\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Ошибка при обмене кода аутентификации:', error);\r\n            this.clearAuthData();\r\n            this.showNotification('Произошла ошибка при авторизации', 'error');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Проверяет сохраненный токен\r\n     */\r\n    async checkStoredToken() {\r\n        const token = localStorage.getItem(this.tokenKey);\r\n\r\n        if (!token) {\r\n            this.clearAuthData();\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${this.authApiUrl}/validate-token`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ token: token })\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok && result.isAuthenticated) {\r\n                this.setAuthData(token, {\r\n                    userId: result.userId,\r\n                    email: result.email,\r\n                    phoneNumber: result.phoneNumber\r\n                });\r\n                console.log('✅ Токен валиден, пользователь авторизован');\r\n            } else {\r\n                console.log('❌ Токен невалиден, очищаем данные');\r\n                this.clearAuthData();\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Ошибка при проверке токена:', error);\r\n            this.clearAuthData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливает данные аутентификации\r\n     */\r\n    setAuthData(token, userData) {\r\n        this.isAuthenticated = true;\r\n        this.userData = userData;\r\n\r\n        localStorage.setItem(this.tokenKey, token);\r\n        localStorage.setItem(this.userDataKey, JSON.stringify(userData));\r\n\r\n        // Устанавливаем токен в cookie для серверных запросов\r\n        document.cookie = `auth_token=${token}; path=/; max-age=3600; samesite=strict`;\r\n\r\n        this.updateUI();\r\n    }\r\n\r\n    /**\r\n     * Очищает данные аутентификации\r\n     */\r\n    clearAuthData() {\r\n        this.isAuthenticated = false;\r\n        this.userData = null;\r\n\r\n        localStorage.removeItem(this.tokenKey);\r\n        localStorage.removeItem(this.userDataKey);\r\n\r\n        // Удаляем cookie\r\n        document.cookie = 'auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';\r\n\r\n        this.updateUI();\r\n    }\r\n\r\n    /**\r\n     * Выполняет выход из системы\r\n     */\r\n    async logout() {\r\n        this.clearAuthData();\r\n        this.showNotification('Вы вышли из системы', 'info');\r\n\r\n        // Перенаправляем на страницу входа IdentityServer\r\n        const identityServerUrl = window.location.protocol + '//' + window.location.hostname + ':55674';\r\n        window.location.href = `${identityServerUrl}/Auth/Login`;\r\n    }\r\n\r\n    /**\r\n     * Получает токен для API запросов\r\n     */\r\n    getAuthToken() {\r\n        return localStorage.getItem(this.tokenKey);\r\n    }\r\n\r\n    /**\r\n     * Создает заголовки для авторизованных запросов\r\n     */\r\n    getAuthHeaders() {\r\n        const token = this.getAuthToken();\r\n        return token ? { 'Authorization': `Bearer ${token}` } : {};\r\n    }\r\n\r\n    /**\r\n     * Обновляет UI в зависимости от состояния авторизации\r\n     */\r\n    updateUI() {\r\n        // Показываем/скрываем элементы для авторизованных пользователей\r\n        const authElements = document.querySelectorAll('[data-auth-required]');\r\n        const guestElements = document.querySelectorAll('[data-guest-only]');\r\n\r\n        authElements.forEach(element => {\r\n            element.style.display = this.isAuthenticated ? 'block' : 'none';\r\n        });\r\n\r\n        guestElements.forEach(element => {\r\n            element.style.display = this.isAuthenticated ? 'none' : 'block';\r\n        });\r\n\r\n        // Обновляем информацию о пользователе\r\n        if (this.isAuthenticated && this.userData) {\r\n            const userEmailElements = document.querySelectorAll('[data-user-email]');            \r\n\r\n            userEmailElements.forEach(element => {\r\n                element.textContent = this.userData.email;\r\n            });            \r\n        }\r\n\r\n        // Обновляем состояние кнопок\r\n        const loginButtons = document.querySelectorAll('[data-login-btn]');\r\n        const logoutButtons = document.querySelectorAll('[data-logout-btn]');\r\n\r\n        loginButtons.forEach(btn => {\r\n            btn.style.display = this.isAuthenticated ? 'none' : 'inline-block';\r\n        });\r\n\r\n        logoutButtons.forEach(btn => {\r\n            btn.style.display = this.isAuthenticated ? 'inline-block' : 'none';\r\n            btn.onclick = () => this.logout();\r\n        });\r\n\r\n        // Генерируем кастомное событие для других скриптов\r\n        const authEvent = new CustomEvent('authStateChanged', {\r\n            detail: {\r\n                isAuthenticated: this.isAuthenticated,\r\n                userData: this.userData\r\n            }\r\n        });\r\n        document.dispatchEvent(authEvent);\r\n        console.log(`генерация события`);\r\n    }\r\n\r\n    /**\r\n     * Удаляет код аутентификации из URL\r\n     */\r\n    clearAuthCodeFromUrl() {\r\n        const url = new URL(window.location);\r\n        url.searchParams.delete('auth');\r\n        window.history.replaceState(null, '', url);\r\n    }\r\n\r\n    /**\r\n     * Показывает уведомление пользователю\r\n     */\r\n    showNotification(message, type = 'info') {\r\n        // Создаем простое уведомление\r\n        const notification = document.createElement('div');\r\n        notification.className = `notification notification-${type}`;\r\n        notification.textContent = message;\r\n\r\n        notification.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            padding: 12px 20px;\r\n            border-radius: 4px;\r\n            color: white;\r\n            z-index: 10000;\r\n            font-weight: 500;\r\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\r\n            ${type === 'success' ? 'background-color: #10B981;' : ''}\r\n            ${type === 'error' ? 'background-color: #EF4444;' : ''}\r\n            ${type === 'info' ? 'background-color: #3B82F6;' : ''}\r\n        `;\r\n\r\n        document.body.appendChild(notification);\r\n\r\n        // Автоматически удаляем через 5 секунд\r\n        setTimeout(() => {\r\n            notification.remove();\r\n        }, 5000);\r\n\r\n        // Добавляем возможность закрытия по клику\r\n        notification.onclick = () => notification.remove();\r\n    }\r\n}\r\n\r\n// Глобальный экземпляр менеджера аутентификации\r\nwindow.authManager = new AuthManager();\r\n\r\n// Полезные глобальные функции\r\nwindow.isAuthenticated = () => window.authManager.isAuthenticated;\r\nwindow.getCurrentUser = () => window.authManager.userData;\r\nwindow.logout = () => window.authManager.logout();","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};"],"names":["UserValidator","_classCallCheck","allowedLetters","validRegionCodes","forbiddenCombinations","_createClass","key","value","validateName","name","fieldName","required","arguments","length","undefined","trim","isValid","error","concat","test","validateBirthday","birthday","birthDate","Date","today","minDate","getFullYear","getMonth","getDate","maxDate","isNaN","getTime","validatePhoneNumber","phone","cleanPhone","replace","phonePatterns","isValidFormat","_i","_phonePatterns","pattern","validateEmail","email","emailRegex","localPart","split","startsWith","endsWith","includes","validateCarNumber","number","cleanNumber","toUpperCase","patterns","type","_i2","_patterns","regionCode","slice","twoDigitCode","threeDigitCode","_iterator","_createForOfIteratorHelper","_step","s","n","done","forbidden","err","e","f","validateCarBrand","validateCarColor","color","validateCar","car","errors","markValidation","mark","modelValidation","model","colorValidation","numberValidation","validateUniqueCarNumbers","cars","numbers","map","_car$number","filter","Boolean","duplicates","seen","Set","forEach","index","has","push","add","firstIndex","indexOf","validateUserData","userData","_this","user","firstNameValidation","firstName","lastNameValidation","lastName","patronymicValidation","patronymic","birthdayValidation","phoneValidation","phoneNumber","emailValidation","carValidation","duplicateIndexes","formatCarNumber","input","letterMap","char","join","formatPhoneNumber","formatted","t","r","Symbol","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","p","y","G","v","a","d","bind","l","TypeError","call","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","apply","_next","_throw","_defineProperties","_toPropertyKey","_toPrimitive","_typeof","toPrimitive","String","Number","UserProfile","userApiAddress","_GetUserById","_callee","userId","response","data","_t","_t2","_t3","_context","fetch","method","headers","ok","Error","text","json","console","log","GetUserById","_x","_getCarsByUserId","_callee2","_t4","_t5","_t6","_context2","getCarsByUserId","_x2","_InsertUserDataToCardOnMainPage","_callee3","userIdLinks","_t7","_context3","document","querySelectorAll","element","link","href","fullName","querySelector","carsCount","textContent","remove","InsertUserDataToCardOnMainPage","_x3","_InsertUserDataToProfile","_callee4","_t8","_context4","setValue","id","getElementById","date","year","month","padStart","day","SetUserCarInProfile","InsertUserDataToProfile","_x4","carTemplate","carsList","insertAdjacentHTML","collectUserDataFromProfile","carsData","_car$querySelector","_car$querySelector2","_car$querySelector3","_car$querySelector4","_car$querySelector5","_car$querySelector6","carId","dataset","carData","parseInt","userProfileInputs","inputKey","inputValue","setHours","toISOString","_updateUserToDB","_callee5","_t9","_t0","_t1","_context5","body","JSON","stringify","_objectSpread","updateUserToDB","_x5","_x6","addEventListener","_event$detail","event","detail","isAuthenticated","userProfile","window","authManager","location","pathname","AuthManager","tokenKey","userDataKey","authApiUrl","initialize","_initialize","urlParams","authCode","URLSearchParams","search","get","exchangeAuthCode","clearAuthCodeFromUrl","checkStoredToken","_exchangeAuthCode","result","setAuthData","token","showNotification","warn","message","clearAuthData","_checkStoredToken","localStorage","getItem","setItem","cookie","updateUI","removeItem","_logout","identityServerUrl","protocol","hostname","logout","getAuthToken","getAuthHeaders","authElements","guestElements","style","display","userEmailElements","loginButtons","logoutButtons","btn","onclick","authEvent","CustomEvent","dispatchEvent","url","URL","searchParams","history","replaceState","notification","createElement","className","cssText","appendChild","setTimeout","getCurrentUser"],"sourceRoot":""}