{"version":3,"file":"app.js","mappings":"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","sources":["webpack://hpm-system/./wwwroot/css/btn.css","webpack://hpm-system/./wwwroot/css/card.css","webpack://hpm-system/./wwwroot/css/grid.css","webpack://hpm-system/./wwwroot/css/house-and-apartments.css","webpack://hpm-system/./wwwroot/css/main.css","webpack://hpm-system/./wwwroot/css/modal.css","webpack://hpm-system/./wwwroot/css/notification.css","webpack://hpm-system/./wwwroot/css/profile-group.css","webpack://hpm-system/./wwwroot/css/variables.css","webpack://hpm-system/./wwwroot/js/ApartmentHouses.js","webpack://hpm-system/./wwwroot/js/ApartmentProfile.js","webpack://hpm-system/./wwwroot/js/ApartmentStatuses.js","webpack://hpm-system/./wwwroot/js/AuthManager.js","webpack://hpm-system/./wwwroot/js/Modal.js","webpack://hpm-system/./wwwroot/js/UserProfile.js","webpack://hpm-system/./wwwroot/js/UserValidator.js","webpack://hpm-system/webpack/bootstrap","webpack://hpm-system/webpack/runtime/define property getters","webpack://hpm-system/webpack/runtime/hasOwnProperty shorthand","webpack://hpm-system/webpack/runtime/make namespace object","webpack://hpm-system/webpack/before-startup","webpack://hpm-system/webpack/startup","webpack://hpm-system/webpack/after-startup"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","export class ApartmentHouses {\r\n    constructor () {\r\n        this.ApartmentAPIAddress = 'https://localhost:55683';\r\n    }\r\n\r\n    //Вставить данные о домах пользователя в карточку на главной странице\r\n    async InsertHouseData (userId, housesListClass, template) {        \r\n        try {\r\n            await this.GetHousesByUserId(userId).then(houses => {\r\n                console.log(`дома пользователя:`);\r\n                console.log(houses);\r\n                \r\n                const housesListContainer = document.querySelector(housesListClass);\r\n                housesListContainer.innerHTML = '';\r\n                houses.forEach(async (house) => {\r\n                    let headOfHOuse = await this.GetHead(house.id);\r\n                    let headTemplate = this.headTemplate(headOfHOuse);\r\n                    let managementCompanyTemplate = this.managementCompanyTemplate();\r\n                    let houseTemplate = template(house, headTemplate, managementCompanyTemplate);\r\n                    housesListContainer.insertAdjacentHTML('beforeend', houseTemplate);\r\n                });\r\n\r\n            }).catch(error => {\r\n                console.error('Ошибка получения данных квартиры:', error);\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    managementCompanyTemplate (company) {\r\n        let companyHTML;\r\n        companyHTML = `\r\n            <div class=\"company-grid\">\r\n                <div class=\"company-item\">\r\n                    <div class=\"company-label\">Название</div>\r\n                    <div class=\"company-value empty\">Не указано</div>\r\n                </div>\r\n                <div class=\"company-item\">\r\n                    <div class=\"company-label\">Аварийно-диспетчерская служба</div>\r\n                    <div class=\"company-value empty\">Не указано</div>\r\n                </div>\r\n                <div class=\"company-item\">\r\n                    <div class=\"company-label\">Режим работы</div>\r\n                    <div class=\"company-value empty\">Не указано</div>\r\n                </div>\r\n                <div class=\"company-item\">\r\n                    <div class=\"company-label\">Приёмная</div>\r\n                    <div class=\"company-value empty\">Не указано</div>\r\n                </div>\r\n                <div class=\"company-item\">\r\n                    <div class=\"company-label\">Адрес домоуправления</div>\r\n                    <div class=\"company-value empty\">Не указано</div>\r\n                </div>\r\n                <div class=\"company-item\">\r\n                    <div class=\"company-label\">Сайт организации</div>\r\n                    <div class=\"company-value empty\">Не указано</div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        return companyHTML;\r\n    }\r\n\r\n    headTemplate (head) {\r\n        let headHTML;\r\n        if (head && typeof(head) == 'object') {\r\n            headHTML = `\r\n                <div class=\"senior-info\">\r\n                    <div class=\"senior-name\">${head.firstName} ${head.patronymic}</div>\r\n                    <div class=\"senior-phone\"><a href=\"tel:${head.phoneNumber}\">${head.phoneNumber}</a></div>\r\n                </div>\r\n            `;\r\n            return headHTML;\r\n        }\r\n        else {\r\n            return `\r\n                <div class=\"senior-info\">\r\n                    <div class=\"no-senior\">Здесь нет старшего по дому</div>\r\n                </div>\r\n            `;\r\n        }\r\n    }\r\n\r\n    MainPageHouseTemplate (house, headTemplate) {\r\n        let houseHTML;\r\n        if (house) {\r\n            houseHTML = `\r\n                <div class=\"house-item\">\r\n                    <div class=\"house-address\" data-house-id=\"${house.id}\">${house.city}, ${house.street}, ${house.number}</div>\r\n                    <div class=\"senior-section\">\r\n                        <div class=\"senior-title\">Старший по дому</div>\r\n                        ${headTemplate}                        \r\n                    </div>\r\n                </div>\r\n            `;            \r\n        }\r\n\r\n        return houseHTML\r\n    }\r\n\r\n    HousesListHouseTemplate (house, headTemplate, managementCompanyTemplate) {\r\n        let houseHTML;\r\n        if (house) {\r\n             houseHTML = `\r\n                <div class=\"card card_house\" data-house-id=\"${house.id}\">\r\n                    <h3 class=\"card-header card-header_house\">${house.city}, улица ${house.street}, дом ${house.number}</h3>\r\n\r\n                    <!-- Основные характеристики -->\r\n                    <div class=\"basic-details\">\r\n                        <div class=\"detail-item\">\r\n                            <span class=\"detail-label\">Тип дома</span>\r\n                            <span class=\"detail-value\">${house.isApartmentBuilding ? \"многоквартирный\" : \"индивидуальный\"}</span>\r\n                        </div>\r\n                        <div class=\"detail-item\">\r\n                            <span class=\"detail-label\">Этажей</span>\r\n                            <span class=\"detail-value\">${house.floors}</span>\r\n                        </div>\r\n                        <div class=\"detail-item\">\r\n                            <span class=\"detail-label\">Подъездов</span>\r\n                            <span class=\"detail-value\">${house.entrances}</span>\r\n                        </div>\r\n                        <div class=\"detail-item\">\r\n                            <span class=\"detail-label\">Газ</span>\r\n                            <span class=\"detail-value ${house.hasGas ? 'utility-yes' : 'utility-no'}\">${house.hasGas ? 'Есть' : 'Нет'}</span>\r\n                        </div>\r\n                        <div class=\"detail-item\">\r\n                            <span class=\"detail-label\">Электричество</span>\r\n                            <span class=\"detail-value ${house.hasElectricity ? 'utility-yes' : 'utility-no'}\">${house.hasElectricity ? 'Есть' : 'Нет'}</span>\r\n                        </div>\r\n                        <div class=\"detail-item\">\r\n                            <span class=\"detail-label\">Год постройки</span>\r\n                            <span class=\"detail-value\">${house.builtYear}</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Площади -->\r\n                    <div class=\"areas-section\">\r\n                        <div class=\"card card_area mb-0\">\r\n                            <div class=\"area-value\">${house.totalArea} м²</div>\r\n                            <div class=\"area-label\">Общая площадь</div>\r\n                        </div>\r\n                        <div class=\"card card_area mb-0\">\r\n                            <div class=\"area-value\">${house.apartmentsArea} м²</div>\r\n                            <div class=\"area-label\">Жилая площадь</div>\r\n                        </div>\r\n                        <div class=\"card card_area mb-0\">\r\n                            <div class=\"area-value\">${house.landArea} м²</div>\r\n                            <div class=\"area-label\">Площадь территории</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Старший по дому -->\r\n                    <div class=\"senior-section\">\r\n                        <h6 class=\"section-title\">Старший по дому</h6>\r\n                        ${headTemplate}                        \r\n                    </div>\r\n                    \r\n\r\n                    <!-- Управляющая компания -->\r\n                    <div class=\"card card_management mb-0\">\r\n                        <h6 class=\"section-title\">Управляющая компания</h6>\r\n                        ${managementCompanyTemplate}\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }        \r\n\r\n        return houseHTML\r\n    }\r\n\r\n    // 1. Получить все дома\r\n    async GetHouses() {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/House`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log('Дома:', data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Ошибка получения списка домов:', error);\r\n        }\r\n    }\r\n\r\n    // 2. Получить дом по ID\r\n    async GetHouse(id) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/House/${id}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(`Дом ${id}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения дома ${id}:`, error);\r\n        }\r\n    }\r\n\r\n    // 3. Создать новый дом\r\n    async CreateHouse(houseData) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/House`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(houseData)\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log('Дом создан:', data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Ошибка создания дома:', error);\r\n        }\r\n    }\r\n\r\n    // 4. Обновить дом\r\n    async UpdateHouse(id, houseData) {\r\n    try {\r\n        const response = await fetch(`${this.ApartmentAPIAddress}/api/House/${id}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(houseData)\r\n        });\r\n        if (!response.ok) {\r\n        const error = await response.text();\r\n        throw new Error(error);\r\n        }\r\n        console.log(`Дом ${id} обновлен`);\r\n    } catch (error) {\r\n        console.error(`Ошибка обновления дома ${id}:`, error);\r\n    }\r\n    }\r\n\r\n    // 5. Удалить дом\r\n    async DeleteHouse(id) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/House/${id}`, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            console.log(`Дом ${id} удален`);\r\n        } catch (error) {\r\n            console.error(`Ошибка удаления дома ${id}:`, error);\r\n        }\r\n    }\r\n\r\n    // 6. Назначить старшего по дому\r\n    async AssignHead(houseId, userId) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/House/${houseId}/head/${userId}`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.text();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(data);\r\n        } catch (error) {\r\n            console.error(`Ошибка назначения старшего по дому ${houseId}:`, error);\r\n        }\r\n    }\r\n\r\n    // 7. Отозвать старшего по дому\r\n    async RevokeHead(houseId) {\r\n        try {\r\n                const response = await fetch(`${this.ApartmentAPIAddress}/api/House/${houseId}/head`, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.text();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(data);\r\n        } catch (error) {\r\n            console.error(`Ошибка отзыва старшего по дому ${houseId}:`, error);\r\n        }\r\n    }\r\n\r\n    // 8. Получить информацию о старшем по дому\r\n    async GetHead(houseId) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/House/${houseId}/head`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n\r\n            // Читаем тело ОДИН раз как текст\r\n            const text = await response.text();\r\n\r\n            let data;\r\n            let isJson = false;\r\n\r\n            // Пытаемся распарсить как JSON\r\n            try {\r\n                data = JSON.parse(text);\r\n                isJson = true;\r\n            } catch (e) {\r\n                // Это не JSON — значит, это просто строка (например, из return NotFound(\"сообщение\"))\r\n                data = { message: text };\r\n            }\r\n\r\n            if (!response.ok) {\r\n                const errorMessage = data.message || data.Message || (isJson ? JSON.stringify(data) : text);\r\n                console.error(`Ошибка ${response.status}:`, errorMessage);\r\n\r\n                if (response.status === 404) {\r\n                    console.log(errorMessage);\r\n                    data = errorMessage;\r\n                }\r\n            }\r\n\r\n            // На случай, если успешный ответ тоже пришёл как plain text (маловероятно)\r\n            if (!isJson) {                \r\n                console.log(`Старший по дому отсутствует: ${data}`);\r\n            }\r\n\r\n            console.log(`Старший по дому ${houseId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения старшего по дому ${houseId}:`, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // 9. Получить дома по ID пользователя\r\n    async GetHousesByUserId(userId) {\r\n        try {\r\n                const response = await fetch(`${this.ApartmentAPIAddress}/api/House/user/${userId}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(`Дома пользователя ${userId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения домов для пользователя ${userId}:`, error);\r\n        }\r\n    }\r\n}\r\n\r\ndocument.addEventListener('authStateChanged', () => {\r\n    const { isAuthenticated, userData } = event.detail;\r\n\r\n    if (isAuthenticated && userData) {\r\n        const houseProfile = new ApartmentHouses();\r\n        const userId = window.authManager.userData.userId;\r\n\r\n        if (window.location.pathname == '/') {\r\n            houseProfile.InsertHouseData(userId, '.houses-list', houseProfile.MainPageHouseTemplate);\r\n        }\r\n\r\n        if (window.location.pathname.includes(`/house/by-user/${userId}`)) {\r\n            houseProfile.InsertHouseData(userId, '.houses-list', houseProfile.HousesListHouseTemplate);\r\n        }\r\n    }\r\n});","import {ApartmentStatuses} from './ApartmentStatuses.js';\r\nimport {ApartmentHouses} from './ApartmentHouses.js';\r\n\r\nclass ApartmentProfile {\r\n    constructor () {\r\n        this.ApartmentAPIAddress = 'https://localhost:55683';\r\n        this.House = new ApartmentHouses();\r\n    }\r\n\r\n    //Вставить данные о квартирах пользователя в карточку на главной странице\r\n    async InsertApartmentDataToCardOnMainPage(userId) {\r\n    try {\r\n        // Получаем квартиры пользователя\r\n        const apartments = await this.GetApartmentsByUserId(userId);\r\n        console.log('Квартиры пользователя:', apartments);\r\n\r\n        const apartmentsListContainer = document.querySelector('.apartments-card .apartments-list');\r\n        apartmentsListContainer.innerHTML = '';\r\n\r\n        // Обрабатываем каждую квартиру\r\n        for (const apartment of apartments) {\r\n            // Получаем дом для текущей квартиры\r\n            const house = await this.House.GetHouse(apartment.houseId);\r\n            // Можно передать house в шаблон, если нужно\r\n            let apartmentTemplate = this.SetApartmentTemplate(apartment, house);\r\n            apartmentsListContainer.insertAdjacentHTML('beforeend', apartmentTemplate);\r\n        }\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке данных квартиры на главную страницу:', error);\r\n    }\r\n}\r\n\r\n    SetApartmentTemplate (apartment, house) {\r\n        let apartmentHTML;        \r\n        let apartmentNumber;\r\n        if (apartment) {\r\n            apartmentHTML = `\r\n                <div class=\"apartment-item\" data-apartment-id=\"${apartment.id}\">\r\n                    <div class=\"apartment-address\">${house.city}, улица ${house.street}, дом ${house.number}</div>\r\n                    <div class=\"apartment-details\">\r\n                        ${house.isApartmentBuilding ? `<div class=\"apartment-detail\">\r\n                            <div class=\"detail-label\">Номер квартиры</div>\r\n                            <div class=\"detail-value\">${apartment.number}</div>\r\n                        </div>` : ''}\r\n                        \r\n                        <div class=\"apartment-detail\">\r\n                            <div class=\"detail-label\">Число комнат</div>\r\n                            <div class=\"detail-value\">${apartment.numbersOfRooms}</div>\r\n                        </div>\r\n\r\n                        <div class=\"apartment-detail\">\r\n                            <div class=\"detail-label\">Общая площадь</div>\r\n                            <div class=\"detail-value\">${apartment.totalArea}</div>\r\n                        </div>\r\n\r\n                        <div class=\"apartment-detail\">\r\n                            <div class=\"detail-label\">Жилая площадь</div>\r\n                            <div class=\"detail-value\">${apartment.residentialArea}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n        \r\n\r\n        return apartmentHTML;\r\n    }\r\n\r\n    //получить квартиры пользователя по ид пользователя\r\n    async GetApartmentsByUserId(userId) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment/user/${userId}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(`Квартиры пользователя ${userId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения квартир пользователя ${userId}:`, error);\r\n        }\r\n    }\r\n\r\n    //получить квартиры пользователя по номеру телефона пользователя\r\n    async GetApartmentsByUserPhone(phone) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment/phone/${phone}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(`Квартиры пользователя с телефоном ${phone}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения квартир по телефону ${phone}:`, error);\r\n        }\r\n    }\r\n\r\n    //получить квартиру по её id\r\n    async GetApartment(id) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment/${id}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(`Квартира ${id}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения квартиры ${id}:`, error);\r\n        }\r\n    }\r\n\r\n    //создать квартиру\r\n    async CreateApartment(apartmentData) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(apartmentData)\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log('Квартира создана:', data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Ошибка создания квартиры:', error);\r\n        }\r\n    }\r\n\r\n    //удалить квартиру\r\n    async DeleteApartment(id) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment/${id}`, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            console.log(`Квартира ${id} удалена`);\r\n        } catch (error) {\r\n            console.error(`Ошибка удаления квартиры ${id}:`, error);\r\n        }\r\n    }\r\n\r\n    //добавить пользователя к квартире\r\n    async AddUserToApartment(apartmentId, userId) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment/${apartmentId}/users/${userId}`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify()\r\n            });\r\n            const data = await response.text();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(data);\r\n        } catch (error) {\r\n            console.error('Ошибка добавления пользователя к квартире:', error);\r\n        }\r\n    }\r\n\r\n    //удалить пользователя из квартиры\r\n    async RemoveUserFromApartment(apartmentId, userId) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment/${apartmentId}/users/${userId}`, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.text();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(data);\r\n        } catch (error) {\r\n            console.error('Ошибка удаления пользователя из квартиры:', error);\r\n        }\r\n    }\r\n\r\n    //обновить долю владения пользователя\r\n    async UpdateUserShare(apartmentId, userId, share) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment/${apartmentId}/users/${userId}/share`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ share })\r\n            });\r\n            const data = await response.text();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(data);\r\n        } catch (error) {\r\n            console.error('Ошибка обновления доли:', error);\r\n        }\r\n    }\r\n\r\n    //получить доли владения для квартиры\r\n    async GetApartmentShares(apartmentId) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment/${apartmentId}/shares`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(`Доли квартиры ${apartmentId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения долей квартиры ${apartmentId}:`, error);\r\n        }\r\n    }\r\n\r\n    //получить статистику по квартире\r\n    async GetApartmentStatistics(apartmentId) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Apartment/${apartmentId}/statistics`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data);\r\n            console.log(`Статистика квартиры ${apartmentId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения статистики квартиры ${apartmentId}:`, error);\r\n        }\r\n    }\r\n}\r\n\r\ndocument.addEventListener('authStateChanged', () => {\r\n    const { isAuthenticated, userData } = event.detail;\r\n\r\n    if (isAuthenticated && userData) {\r\n        const apartmentProfile = new ApartmentProfile();\r\n        const userId = window.authManager.userData.userId;\r\n\r\n       if (window.location.pathname == '/') {\r\n            apartmentProfile.InsertApartmentDataToCardOnMainPage(userId);\r\n        }\r\n    }\r\n});","export class ApartmentStatuses {\r\n    constructor () {\r\n        this.ApartmentAPIAddress = 'https://localhost:55683';\r\n    }\r\n\r\n    // 1. Получить все статусы\r\n    async GetStatuses() {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Status`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(`Ошибка ${response.status}: ${errorText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log('Статусы:', data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Ошибка получения статусов:', error.message || error);\r\n        }\r\n    }\r\n\r\n    // 2. Получить статус по ID\r\n    async GetStatus(id) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Status/${id}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                if (response.status === 404) {\r\n                    console.log(`Статус с ID ${id} не найден.`);\r\n                    return null;\r\n                }\r\n                const errorText = await response.text();\r\n                throw new Error(`Ошибка ${response.status}: ${errorText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(`Статус ${id}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения статуса ${id}:`, error.message || error);\r\n        }\r\n    }\r\n\r\n    // 3. Создать новый статус\r\n    async CreateStatus(name) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Status`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ name: name })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let errorMessage;\r\n                const contentType = response.headers.get(\"content-type\");\r\n                if (contentType && contentType.includes(\"application/json\")) {\r\n                    const errorData = await response.json();\r\n                    errorMessage = `Ошибка ${response.status}: ${JSON.stringify(errorData)}`;\r\n                } else {\r\n                    const errorText = await response.text();\r\n                    errorMessage = `Ошибка ${response.status}: ${errorText}`;\r\n                }\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log('Статус создан:', data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Ошибка создания статуса:', error.message || error);\r\n        }\r\n    }\r\n\r\n    // 4. Обновить статус\r\n    async UpdateStatus(id, newName) {\r\n    try {\r\n        const response = await fetch(`${this.ApartmentAPIAddress}/api/Status/${id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: newName }) // Предполагается, что DTO UpdateStatusDto имеет поле name\r\n        });\r\n\r\n        if (!response.ok) {\r\n            if (response.status === 404) {\r\n                console.log(`Статус с ID ${id} не найден для обновления.`);\r\n                return false;\r\n            }\r\n            let errorMessage;\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (contentType && contentType.includes(\"application/json\")) {\r\n                const errorData = await response.json();\r\n                errorMessage = `Ошибка ${response.status}: ${JSON.stringify(errorData)}`;\r\n            } else {\r\n                const errorText = await response.text();\r\n                errorMessage = `Ошибка ${response.status}: ${errorText}`;\r\n            }\r\n            throw new Error(errorMessage);\r\n        }\r\n\r\n        console.log(`Статус ${id} обновлён.`);\r\n        return true;\r\n    } catch (error) {\r\n        console.error(`Ошибка обновления статуса ${id}:`, error.message || error);\r\n        return false; // Возвращаем false в случае ошибки\r\n    }\r\n    }\r\n\r\n    // 5. Удалить статус\r\n    async DeleteStatus(id) {\r\n    try {\r\n        const response = await fetch(`${this.ApartmentAPIAddress}/api/Status/${id}`, {\r\n            method: 'DELETE',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            if (response.status === 404) {\r\n                console.log(`Статус с ID ${id} не найден для удаления.`);\r\n                return false;\r\n            }\r\n            // Проверим, может быть ошибка 409 Conflict (если статус используется)\r\n            if (response.status === 409) {\r\n                const errorText = await response.text();\r\n                console.log(`Конфликт при удалении статуса ${id}: ${errorText}`);\r\n                return false;\r\n            }\r\n            const errorText = await response.text();\r\n            throw new Error(`Ошибка ${response.status}: ${errorText}`);\r\n        }\r\n\r\n        console.log(`Статус ${id} удалён.`);\r\n        return true;\r\n    } catch (error) {\r\n        console.error(`Ошибка удаления статуса ${id}:`, error.message || error);\r\n        return false; // Возвращаем false в случае ошибки\r\n    }\r\n    }\r\n\r\n    // 6. Назначить статус пользователю для квартиры\r\n    async AssignStatusToUser(apartmentId, userId, statusId) {\r\n    try {\r\n        const response = await fetch(`${this.ApartmentAPIAddress}/api/Status/apartment/${apartmentId}/user/${userId}/status/${statusId}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n        // Тело запроса не требуется для этого эндпоинта\r\n        });\r\n\r\n        if (!response.ok) {\r\n        let errorMessage;\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (contentType && contentType.includes(\"application/json\")) {\r\n            const errorData = await response.json();\r\n            errorMessage = `Ошибка ${response.status}: ${JSON.stringify(errorData)}`;\r\n        } else {\r\n            const errorText = await response.text();\r\n            errorMessage = `Ошибка ${response.status}: ${errorText}`;\r\n        }\r\n        throw new Error(errorMessage);\r\n        }\r\n\r\n        const successMessage = await response.text(); // Ожидаем текстовое сообщение\r\n        console.log(successMessage);\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Ошибка назначения статуса пользователю:', error.message || error);\r\n        return false; // Возвращаем false в случае ошибки\r\n    }\r\n    }\r\n\r\n    // 7. Отозвать статус у пользователя для квартиры\r\n    async RevokeStatusFromUser(apartmentId, userId, statusId) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Status/apartment/${apartmentId}/user/${userId}/status/${statusId}`, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json' }\r\n                // Тело запроса не требуется для этого эндпоинта\r\n            });\r\n\r\n            if (!response.ok) {\r\n                if (response.status === 404) {\r\n                    console.log(`Связь статуса ${statusId} с пользователем ${userId} для квартиры ${apartmentId} не найдена.`);\r\n                    return false;\r\n                }\r\n                let errorMessage;\r\n                const contentType = response.headers.get(\"content-type\");\r\n                if (contentType && contentType.includes(\"application/json\")) {\r\n                    const errorData = await response.json();\r\n                    errorMessage = `Ошибка ${response.status}: ${JSON.stringify(errorData)}`;\r\n                } else {\r\n                    const errorText = await response.text();\r\n                    errorMessage = `Ошибка ${response.status}: ${errorText}`;\r\n                }\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            const successMessage = await response.text(); // Ожидаем текстовое сообщение\r\n            console.log(successMessage);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Ошибка отзыва статуса у пользователя:', error.message || error);\r\n            return false; // Возвращаем false в случае ошибки\r\n        }\r\n    }\r\n\r\n    // 8. Получить все статусы пользователя для квартиры\r\n    async GetUserStatusesForApartment(apartmentId, userId) {\r\n        try {\r\n            const response = await fetch(`${this.ApartmentAPIAddress}/api/Status/apartment/${apartmentId}/user/${userId}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                if (response.status === 404) {\r\n                    console.log(`Пользователь ${userId} не связан с квартирой ${apartmentId} или связь не найдена.`);\r\n                    return [];\r\n                }\r\n                const errorText = await response.text();\r\n                throw new Error(`Ошибка ${response.status}: ${errorText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(`Статусы пользователя ${userId} для квартиры ${apartmentId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения статусов пользователя ${userId} для квартиры ${apartmentId}:`, error.message || error);\r\n            return []; // Возвращаем пустой массив в случае ошибки\r\n        }\r\n    }\r\n}","class AuthManager {\r\n    constructor() {\r\n        this.tokenKey = 'hpm_auth_token';\r\n        this.userDataKey = 'hpm_user_data';\r\n        this.authApiUrl = '/api/auth';\r\n        this.isAuthenticated = false;\r\n        this.userData = null;\r\n\r\n        // Автоматически инициализируем при загрузке\r\n        this.initialize();\r\n    }\r\n\r\n    /**\r\n     * Инициализация менеджера аутентификации\r\n     */\r\n    async initialize() {\r\n        // Проверяем наличие кода аутентификации в URL\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const authCode = urlParams.get('auth');\r\n\r\n        if (authCode) {\r\n            console.log('Найден код аутентификации в URL');\r\n            await this.exchangeAuthCode(authCode);\r\n\r\n            // Удаляем код из URL после обработки\r\n            this.clearAuthCodeFromUrl();\r\n        } else {\r\n            // Проверяем сохраненный токен\r\n            await this.checkStoredToken();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Обменивает код аутентификации на токен\r\n     */\r\n    async exchangeAuthCode(authCode) {\r\n        try {\r\n            const response = await fetch(`${this.authApiUrl}/exchange-code`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ authCode: authCode })\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok && result.isAuthenticated) {\r\n                this.setAuthData(result.token, {\r\n                    userId: result.userId,\r\n                    email: result.email,\r\n                    phoneNumber: result.phoneNumber\r\n                });\r\n\r\n                console.log('✅ Авторизация успешна');\r\n                this.showNotification('Добро пожаловать!', 'success');\r\n            } else {\r\n                console.warn('❌ Ошибка при обмене кода аутентификации:', result.message);\r\n                this.clearAuthData();\r\n                this.showNotification(result.message || 'Ошибка авторизации', 'error');\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Ошибка при обмене кода аутентификации:', error);\r\n            this.clearAuthData();\r\n            this.showNotification('Произошла ошибка при авторизации', 'error');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Проверяет сохраненный токен\r\n     */\r\n    async checkStoredToken() {\r\n        const token = localStorage.getItem(this.tokenKey);\r\n\r\n        if (!token) {\r\n            this.clearAuthData();\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${this.authApiUrl}/validate-token`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ token: token })\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok && result.isAuthenticated) {\r\n                this.setAuthData(token, {\r\n                    userId: result.userId,\r\n                    email: result.email,\r\n                    phoneNumber: result.phoneNumber\r\n                });\r\n                console.log('✅ Токен валиден, пользователь авторизован');\r\n            } else {\r\n                console.log('❌ Токен невалиден, очищаем данные');\r\n                this.clearAuthData();\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Ошибка при проверке токена:', error);\r\n            this.clearAuthData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливает данные аутентификации\r\n     */\r\n    setAuthData(token, userData) {\r\n        this.isAuthenticated = true;\r\n        this.userData = userData;\r\n\r\n        localStorage.setItem(this.tokenKey, token);\r\n        localStorage.setItem(this.userDataKey, JSON.stringify(userData));\r\n\r\n        // Устанавливаем токен в cookie для серверных запросов\r\n        document.cookie = `auth_token=${token}; path=/; max-age=3600; samesite=strict`;\r\n\r\n        this.updateUI();\r\n    }\r\n\r\n    /**\r\n     * Очищает данные аутентификации\r\n     */\r\n    clearAuthData() {\r\n        this.isAuthenticated = false;\r\n        this.userData = null;\r\n\r\n        localStorage.removeItem(this.tokenKey);\r\n        localStorage.removeItem(this.userDataKey);\r\n\r\n        // Удаляем cookie\r\n        document.cookie = 'auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';\r\n\r\n        this.updateUI();\r\n    }\r\n\r\n    /**\r\n     * Выполняет выход из системы\r\n     */\r\n    async logout() {\r\n        this.clearAuthData();\r\n        this.showNotification('Вы вышли из системы', 'info');\r\n\r\n        // Перенаправляем на страницу входа IdentityServer\r\n        const identityServerUrl = window.location.protocol + '//' + window.location.hostname + ':55674';\r\n        window.location.href = `${identityServerUrl}/Auth/Login`;\r\n    }\r\n\r\n    /**\r\n     * Получает токен для API запросов\r\n     */\r\n    getAuthToken() {\r\n        return localStorage.getItem(this.tokenKey);\r\n    }\r\n\r\n    /**\r\n     * Создает заголовки для авторизованных запросов\r\n     */\r\n    getAuthHeaders() {\r\n        const token = this.getAuthToken();\r\n        return token ? { 'Authorization': `Bearer ${token}` } : {};\r\n    }\r\n\r\n    /**\r\n     * Обновляет UI в зависимости от состояния авторизации\r\n     */\r\n    updateUI() {\r\n        // Показываем/скрываем элементы для авторизованных пользователей\r\n        const authElements = document.querySelectorAll('[data-auth-required]');\r\n        const guestElements = document.querySelectorAll('[data-guest-only]');\r\n\r\n        authElements.forEach(element => {\r\n            element.style.display = this.isAuthenticated ? 'block' : 'none';\r\n        });\r\n\r\n        guestElements.forEach(element => {\r\n            element.style.display = this.isAuthenticated ? 'none' : 'block';\r\n        });\r\n\r\n        // Обновляем информацию о пользователе\r\n        if (this.isAuthenticated && this.userData) {\r\n            const userEmailElements = document.querySelectorAll('[data-user-email]');            \r\n\r\n            userEmailElements.forEach(element => {\r\n                element.textContent = this.userData.email;\r\n            });            \r\n        }\r\n\r\n        // Обновляем состояние кнопок\r\n        const loginButtons = document.querySelectorAll('[data-login-btn]');\r\n        const logoutButtons = document.querySelectorAll('[data-logout-btn]');\r\n\r\n        loginButtons.forEach(btn => {\r\n            btn.style.display = this.isAuthenticated ? 'none' : 'inline-block';\r\n        });\r\n\r\n        logoutButtons.forEach(btn => {\r\n            btn.style.display = this.isAuthenticated ? 'inline-block' : 'none';\r\n            btn.onclick = () => this.logout();\r\n        });\r\n\r\n        // Генерируем кастомное событие для других скриптов\r\n        const authEvent = new CustomEvent('authStateChanged', {\r\n            detail: {\r\n                isAuthenticated: this.isAuthenticated,\r\n                userData: this.userData\r\n            }\r\n        });\r\n        document.dispatchEvent(authEvent);\r\n        console.log(`генерация события`);\r\n    }\r\n\r\n    /**\r\n     * Удаляет код аутентификации из URL\r\n     */\r\n    clearAuthCodeFromUrl() {\r\n        const url = new URL(window.location);\r\n        url.searchParams.delete('auth');\r\n        window.history.replaceState(null, '', url);\r\n    }\r\n\r\n    /**\r\n     * Показывает уведомление пользователю\r\n     */\r\n    showNotification(message, type = 'info') {\r\n        // Создаем простое уведомление\r\n        const notification = document.createElement('div');\r\n        notification.className = `notification notification-${type}`;\r\n        notification.textContent = message;\r\n\r\n        notification.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            padding: 12px 20px;\r\n            border-radius: 4px;\r\n            color: white;\r\n            z-index: 10000;\r\n            font-weight: 500;\r\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\r\n            ${type === 'success' ? 'background-color: #10B981;' : ''}\r\n            ${type === 'error' ? 'background-color: #EF4444;' : ''}\r\n            ${type === 'info' ? 'background-color: #3B82F6;' : ''}\r\n        `;\r\n\r\n        document.body.appendChild(notification);\r\n\r\n        // Автоматически удаляем через 5 секунд\r\n        setTimeout(() => {\r\n            notification.remove();\r\n        }, 5000);\r\n\r\n        // Добавляем возможность закрытия по клику\r\n        notification.onclick = () => notification.remove();\r\n    }\r\n}\r\n\r\n// Глобальный экземпляр менеджера аутентификации\r\nwindow.authManager = new AuthManager();\r\n\r\n// Полезные глобальные функции\r\nwindow.isAuthenticated = () => window.authManager.isAuthenticated;\r\nwindow.getCurrentUser = () => window.authManager.userData;\r\nwindow.logout = () => window.authManager.logout();","export class Modal {\r\n    constructor () {\r\n        this.OpenModal();\r\n        this.CloseModal();\r\n        this.CloseModalOnOutsideClick();\r\n    }\r\n\r\n    OpenModal () {\r\n      document.querySelectorAll('[data-modal=\"open\"]').forEach(modalCall => {\r\n        modalCall.addEventListener('click', function () {\r\n          document.querySelector('.modal-overview').classList.add('active');\r\n        });\r\n      });\r\n    }\r\n\r\n    CloseModal () {\r\n      document.querySelectorAll('.modal-close').forEach(cross => {\r\n        cross.addEventListener('click', () => {\r\n          cross.closest('.modal-overview').classList.remove('active');\r\n        });\r\n      });\r\n    }\r\n\r\n    CloseModalOnOutsideClick () {\r\n      const modalOverview = document.querySelector('.modal-overview');\r\n      if (modalOverview) {\r\n        modalOverview.addEventListener('click', (event) => {        \r\n          if (!event.target.classList.contains('modal-content-wrapper') && event.target.closest('.modal-content-wrapper') == null) {          \r\n            modalOverview.classList.remove('active');\r\n          }\r\n        });\r\n      }      \r\n    }\r\n\r\n    static ShowNotification(text, color) {\r\n        const notification = document.createElement('div');\r\n        notification.className = 'notification';\r\n        notification.textContent = text;\r\n        notification.style.backgroundColor = color;\r\n        \r\n        // Добавляем уведомление в документ\r\n        document.body.appendChild(notification);\r\n        \r\n        // Через 2 секунды удаляем уведомление\r\n        setTimeout(() => {\r\n            if (notification.parentNode) {\r\n                notification.parentNode.removeChild(notification);\r\n            }\r\n        }, 2000);\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new Modal();\r\n})","import { UserValidator } from './UserValidator.js';\r\nimport { Modal } from './Modal.js';\r\n\r\nclass UserProfile {\r\n    constructor () {\r\n        this.userApiAddress = 'http://localhost:55680';\r\n        this.validator = new UserValidator();\r\n    }\r\n\r\n    async GetUserById(userId) {\r\n        try {\r\n            const response = await fetch(`${this.userApiAddress}/api/Users/${userId}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            const data = await response.json();\r\n            console.log(`Пользователь ${userId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения пользователя ${userId}:`, error);\r\n        }\r\n    }\r\n\r\n    async GetCarsByUserId(userId) {\r\n        try {\r\n            const response = await fetch(`${this.userApiAddress}/api/Cars/by-user/${userId}`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            const data = await response.json();\r\n            console.log(`Автомобили пользователя ${userId}:`, data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Ошибка получения автомобилей пользователя ${userId}:`, error);\r\n        }\r\n    }\r\n\r\n    async InsertUserDataToCardOnMainPage (userId) {\r\n        const userIdLinks = document.querySelectorAll('a[data-user-id]');\r\n        userIdLinks.forEach(element => {\r\n            const link = element.href;\r\n            element.href += userId;\r\n        });\r\n\r\n        try {\r\n            await this.GetUserById(userId).then(user => {\r\n                \r\n                const fullName = document.querySelector('[data-user-fullname]');\r\n                const phone = document.querySelector('[data-user-phone]')\r\n                const carsCount = document.querySelector('[data-user-carslist]');\r\n\r\n                \r\n                fullName.textContent = `${user.firstName} ${user.lastName} ${user.patronymic}`;\r\n                phone.textContent = user.phoneNumber;\r\n\r\n                if (user.cars.length == 0) {\r\n                    carsCount.remove();\r\n                } else if (user.cars.length == 1) {\r\n                    const car = user.cars[0];\r\n\r\n                    carsCount.textContent = `${car.color} ${car.mark} ${car.model}, ${car.number}`;\r\n                } else {\r\n                    carsCount.textContent = `${user.cars.length} машины`;\r\n                }\r\n            }).catch(error => {\r\n                console.error('Ошибка получения данных пользователя:', error);\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async InsertCarsToUserProfile (userId) {\r\n        const cars = await this.GetCarsByUserId(userId);\r\n        const carsContainer = document.querySelector('.profile-group[data-group=\"cars\"] .cars-list');\r\n        carsContainer.innerHTML = '';\r\n        cars.forEach(car => {\r\n            this.SetUserCar(car, carsContainer);\r\n        });\r\n    }\r\n\r\n    async InsertUserDataToProfile (userId) {\r\n        try {\r\n            await this.GetUserById(userId).then(user => {\r\n                const setValue = (id, value) => {\r\n                    const element = document.getElementById(id);\r\n                    if (element) {\r\n                        // Специальная обработка для даты рождения\r\n                        if (id === 'birthday' && value) {\r\n                            // Преобразуем ISO строку в формат YYYY-MM-DD\r\n                            const date = new Date(value);\r\n                            const year = date.getFullYear();\r\n                            const month = String(date.getMonth() + 1).padStart(2, '0');\r\n                            const day = String(date.getDate()).padStart(2, '0');\r\n                            element.value = `${year}-${month}-${day}`;\r\n                        } else {\r\n                            element.value = value !== null && value !== '' ? value : '';\r\n                        }\r\n                    }\r\n                };\r\n                \r\n                setValue('firstName', user.firstName);\r\n                setValue('lastName', user.lastName);\r\n                setValue('patronymic', user.patronymic);\r\n                setValue('birthday', user.birthday);\r\n                setValue('phoneNumber', user.phoneNumber);\r\n                setValue('email', user.email);\r\n            }).catch(error => {\r\n                console.error('Ошибка получения данных пользователя:', error);\r\n            });\r\n\r\n            await this.InsertCarsToUserProfile(userId);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    SetCarTemplate (car) {\r\n        let buttonDelCar = `\r\n        <div class=\"remove-car\" data-action=\"remove-car-from-user\" data-car-id=\"${car.id}\" title=\"Удалить этот автомобиль\">\r\n            &#10060;\r\n        </div>`;\r\n        let disabledOrNot = 'disabled';\r\n\r\n        if (!Object.keys(car).length) {\r\n            car.id = '';\r\n            car.mark = '';\r\n            car.model = '';\r\n            car.color = '';\r\n            car.number = '';\r\n            car.userId = window.authManager.userData.userId;\r\n\r\n            buttonDelCar = '';\r\n            disabledOrNot = '';\r\n        }\r\n\r\n        const carTemplate = `\r\n            <div class=\"car\" data-car-id=\"${car.id}\">\r\n                <div class=\"form-group\">\r\n                    <input ${disabledOrNot} type=\"text\" placeholder=\" \" name=\"mark\" id=\"mark-${car.id}\" value=\"${car.mark}\" />\r\n                    <label for=\"mark-${car.id}\">Марка</label>\r\n                    <div class=\"error invisible\" data-error=\"mark\">Неверная марка машины</div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input ${disabledOrNot} type=\"text\" placeholder=\" \" name=\"model\" id=\"model-${car.id}\" value=\"${car.model}\" />\r\n                    <label for=\"model-${car.id}\">Модель</label>\r\n                    <div class=\"error invisible\" data-error=\"model\">Неверная модель машины</div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input ${disabledOrNot} type=\"text\" placeholder=\" \" name=\"color\" id=\"color-${car.id}\" value=\"${car.color}\" />\r\n                    <label for=\"color-${car.id}\">Цвет</label>\r\n                    <div class=\"error invisible\" data-error=\"color\">Неверный цвет машины</div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input ${disabledOrNot} type=\"text\" placeholder=\" \" name=\"number\" id=\"number-${car.id}\" value=\"${car.number}\" />\r\n                    <label for=\"number-${car.id}\">Номер</label>\r\n                    <div class=\"error invisible\" data-error=\"number\">Неверный номер машины</div>\r\n                </div>\r\n                ${buttonDelCar}\r\n            </div>\r\n        `;\r\n\r\n        return carTemplate;\r\n    }\r\n\r\n    SetUserCar (car, carsList) {\r\n        \r\n        let carTemplate = this.SetCarTemplate(car);        \r\n       \r\n        if (carsList) {\r\n            carsList.insertAdjacentHTML('beforeend', carTemplate);\r\n        }\r\n    }\r\n\r\n    CollectUserDataFromProfile() {\r\n        let userData = {};\r\n\r\n        //Собираем данные по пользователю\r\n        const userProfileInputs = document.querySelectorAll('.profile-group[data-group=\"user\"] input');\r\n        userProfileInputs.forEach(input => {\r\n            const inputKey = input.id;\r\n            let inputValue = input.value;\r\n\r\n            // Обработка даты рождения\r\n            if (inputKey === 'birthday' && inputValue) {\r\n                // Преобразуем дату в формат ISO с UTC\r\n                let date = new Date(inputValue);\r\n                // Устанавливаем время в 00:00:00 и конвертируем в UTC\r\n                date.setHours(0, 0, 0, 0);\r\n                inputValue = date.toISOString();\r\n            }\r\n\r\n            userData[inputKey] = inputValue;\r\n        });\r\n\r\n        return userData;\r\n    }\r\n\r\n    CollectCarsDataFromProfile() {\r\n        let carsData = [];\r\n\r\n        // собираем данные по машинам из профиля\r\n        const cars = document.querySelectorAll('.profile-group[data-group=\"cars\"] .car');\r\n        cars.forEach(car => {\r\n            const carData = {\r\n                id: car.dataset.carId || '',\r\n                mark: car.querySelector('input[name=\"mark\"]')?.value || '',\r\n                model: car.querySelector('input[name=\"model\"]')?.value || '',\r\n                color: car.querySelector('input[name=\"color\"]')?.value || '',\r\n                number: car.querySelector('input[name=\"number\"]')?.value || '',\r\n                userId: window.authManager.userData.userId\r\n            };\r\n            carsData.push(carData);\r\n        });\r\n\r\n        return carsData;\r\n    }\r\n\r\n    CollectCarsDataFromModal () {\r\n        let carData = {};\r\n\r\n        // собираем данные по машинам\r\n        let cars = document.querySelectorAll('.car-modal .car');\r\n        cars.forEach(car => {            \r\n            carData = {\r\n                mark: car.querySelector('input[name=\"mark\"]')?.value || '',\r\n                model: car.querySelector('input[name=\"model\"]')?.value || '',\r\n                color: car.querySelector('input[name=\"color\"]')?.value || '',\r\n                number: car.querySelector('input[name=\"number\"]')?.value || '',\r\n                userId: window.authManager.userData.userId\r\n            };\r\n        });\r\n\r\n        console.log(`Добавляемые машины:`);\r\n        console.log(carData);\r\n        return carData;\r\n    }\r\n\r\n    ShowValidationErrors(errors) {\r\n        // Очищаем все предыдущие ошибки\r\n        document.querySelectorAll('.error').forEach(error => {\r\n            error.classList.add('invisible');\r\n        });\r\n\r\n        // Показываем ошибки пользователя\r\n        if (errors.user) {\r\n            Object.keys(errors.user).forEach(field => {\r\n                const errorElement = document.querySelector(`[data-error=\"${field}\"]`);\r\n                if (errorElement) {\r\n                    errorElement.textContent = errors.user[field];\r\n                    errorElement.classList.remove('invisible');\r\n                }\r\n            });\r\n        }\r\n\r\n        // Показываем ошибки автомобилей\r\n        if (errors.cars && errors.cars.length > 0) {\r\n            errors.cars.forEach((carErrors, index) => {\r\n                Object.keys(carErrors).forEach(field => {\r\n                    const errorElement = document.querySelector(`.profile-group[data-group=\"cars\"] .car:nth-child(${index + 1}) [data-error=\"${field}\"]`);\r\n                    if (errorElement) {\r\n                        errorElement.textContent = carErrors[field];\r\n                        errorElement.classList.remove('invisible');\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    async UpdateUserToDB (id, userData) {        \r\n        try {\r\n            // Валидация данных пользователя\r\n            const validation = this.validator.validateUserData(userData);\r\n            \r\n            // Собираем данные автомобилей для валидации\r\n            const carsData = this.CollectCarsDataFromProfile();\r\n            \r\n            // Валидация автомобилей\r\n            const carsValidation = this.ValidateCarsData(carsData);\r\n            \r\n            // Объединяем ошибки\r\n            const allErrors = {\r\n                user: validation.errors.user,\r\n                cars: carsValidation.errors\r\n            };\r\n\r\n            if (!validation.isValid || !carsValidation.isValid) {\r\n                this.ShowValidationErrors(allErrors);\r\n                Modal.ShowNotification('Исправьте ошибки в форме', 'red');\r\n                return;\r\n            }\r\n\r\n            // Если валидация прошла успешно, очищаем ошибки\r\n            document.querySelectorAll('.error').forEach(error => {\r\n                error.classList.add('invisible');\r\n            });\r\n\r\n            const response = await fetch(`${this.userApiAddress}/api/Users/${id}`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ ...userData, id })\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            console.log(`Пользователь ${id} обновлён`);\r\n            Modal.ShowNotification('Данные пользователя сохранены', 'green');\r\n        } catch (error) {\r\n            console.error(`Ошибка обновления пользователя ${id}:`, error);\r\n            Modal.ShowNotification('Ошибка сохранения данных', 'red');\r\n        }\r\n    }\r\n\r\n    ValidateCarsData(carsData) {\r\n        const errors = [];\r\n        let isValid = true;\r\n\r\n        carsData.forEach(car => {\r\n            const carValidation = this.validator.validateCar(car);\r\n            if (!carValidation.isValid) {\r\n                errors.push(carValidation.errors);\r\n                isValid = false;\r\n            } else {\r\n                errors.push({});\r\n            }\r\n        });\r\n\r\n        // Проверка уникальности номеров\r\n        const duplicateIndices = this.validator.validateUniqueCarNumbers(carsData);\r\n        if (duplicateIndices.length > 0) {\r\n            duplicateIndices.forEach(index => {\r\n                if (!errors[index]) errors[index] = {};\r\n                errors[index].number = 'Номер автомобиля уже существует';\r\n                isValid = false;\r\n            });\r\n        }\r\n\r\n        return { isValid, errors };\r\n    }\r\n\r\n    ValidateCarInModal() {\r\n        const carData = this.CollectCarsDataFromModal();\r\n        const validation = this.validator.validateCar(carData);\r\n        \r\n        // Очищаем ошибки в модальном окне\r\n        document.querySelectorAll('.car-modal .error').forEach(error => {\r\n            error.classList.add('invisible');\r\n        });\r\n\r\n        if (!validation.isValid) {\r\n            Object.keys(validation.errors).forEach(field => {\r\n                const errorElement = document.querySelector(`.car-modal [data-error=\"${field}\"]`);\r\n                if (errorElement) {\r\n                    errorElement.textContent = validation.errors[field];\r\n                    errorElement.classList.remove('invisible');\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    async AddCarToUser (userId) {\r\n        // Валидация данных автомобиля\r\n        if (!this.ValidateCarInModal()) {\r\n            Modal.ShowNotification('Исправьте ошибки в форме автомобиля', 'red');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${this.userApiAddress}/api/Cars`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(this.CollectCarsDataFromModal())\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            const data = await response.json();\r\n            console.log('Автомобиль создан:', data);\r\n\r\n            //инсертим автомобиль в список\r\n            await this.InsertCarsToUserProfile(userId);\r\n            //зачищаем модалку и закрываем её\r\n            document.querySelectorAll('.car-modal input').forEach(input => {\r\n                input.value = '';\r\n            });\r\n            document.querySelector('.car-modal').closest('.modal-overview').classList.remove('active');\r\n            Modal.ShowNotification('Автомобиль успешно добавлен', 'green');\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Ошибка создания автомобиля:', error);\r\n            Modal.ShowNotification('Ошибка добавления автомобиля', 'red');\r\n        }\r\n    }\r\n\r\n    async RemoveCarFromUser (carId) {\r\n        try {\r\n            const response = await fetch(`${this.userApiAddress}/api/Cars/${carId}`, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            console.log(`Автомобиль ${carId} удалён`);\r\n            //удоляем строку с отображением авто из профиля\r\n            document.querySelector(`.profile-group .car[data-car-id=\"${carId}\"]`).remove();\r\n            \r\n            Modal.ShowNotification('Автомобиль успешно удалён', 'green');\r\n        } catch (error) {\r\n            console.error(`Ошибка удаления автомобиля ${carId}:`, error);\r\n            Modal.ShowNotification('Ошибка удаления автомобиля', 'red');\r\n        }\r\n    }\r\n}\r\n\r\ndocument.addEventListener('authStateChanged', () => {\r\n    const { isAuthenticated, userData } = event.detail;\r\n\r\n    if (isAuthenticated && userData) {\r\n        const userProfile = new UserProfile();\r\n        const userId = window.authManager.userData.userId;\r\n\r\n        if (window.location.pathname == '/') {\r\n            userProfile.InsertUserDataToCardOnMainPage(userId);\r\n        }\r\n        \r\n        if (document.getElementById('user-profile')) {\r\n            userProfile.InsertUserDataToProfile (userId);\r\n\r\n            document.querySelector(`[data-action=\"save-user-data\"]`).addEventListener('click', () => {\r\n                userProfile.UpdateUserToDB(window.authManager.userData.userId, userProfile.CollectUserDataFromProfile());\r\n            });\r\n\r\n            document.querySelector(`[data-action=\"add-car-to-user\"]`).addEventListener('click', () => {\r\n                userProfile.AddCarToUser(window.authManager.userData.userId);\r\n            });\r\n\r\n            document.addEventListener('click', (e) => {            \r\n                if (e.target.dataset.action == 'remove-car-from-user') {\r\n                    const carId = e.target.dataset.carId;\r\n                    userProfile.RemoveCarFromUser(carId);\r\n                }\r\n            });\r\n        }\r\n    }\r\n});","export class UserValidator {\r\n    constructor() {\r\n        // Разрешенные буквы в российских номерах (совпадают с латинскими)\r\n        this.allowedLetters = 'АВЕКМНОРСТУХ';\r\n\r\n        // Коды регионов России\r\n        this.validRegionCodes = [\r\n            // Основные регионы\r\n            '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',\r\n            '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',\r\n            '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',\r\n            '31', '32', '33', '34', '35', '36', '37', '38', '39', '40',\r\n            '41', '42', '43', '44', '45', '46', '47', '48', '49', '50',\r\n            '51', '52', '53', '54', '55', '56', '57', '58', '59', '60',\r\n            '61', '62', '63', '64', '65', '66', '67', '68', '69', '70',\r\n            '71', '72', '73', '74', '75', '76', '77', '78', '79', '80',\r\n            '81', '82', '83', '84', '85', '86', '87', '88', '89', '90',\r\n            '91', '92', '93', '94', '95', '96', '97', '98', '99',\r\n            // Трёхзначные коды для крупных регионов\r\n            '102', '113', '116', '117', '118', '119', '121', '122', '123',\r\n            '124', '125', '126', '134', '136', '138', '142', '150', '152',\r\n            '154', '159', '161', '163', '164', '173', '174', '177', '178',\r\n            '186', '190', '196', '197', '198', '199', '702', '716', '750',\r\n            '761', '763', '774', '777', '790', '799', '999'\r\n        ];\r\n\r\n        // Запрещенные комбинации\r\n        this.forbiddenCombinations = [\r\n            /.*ХУ[ЙИ].*/,\r\n            /.*БЛ[ЯА].*/,\r\n            /.*П[ИИ]З.*/,\r\n            /.*МУД.*/,\r\n            /.*ГОВ.*/\r\n        ];\r\n    }\r\n\r\n    //Валидация имени/фамилии/отчества\r\n    validateName(name, fieldName, required = true) {\r\n        if (!name || name.trim() === '') {\r\n            if (required) {\r\n                return { isValid: false, error: `${fieldName} обязательно для заполнения` };\r\n            }\r\n            return { isValid: true };\r\n        }\r\n\r\n        if (name.length > 50) {\r\n            return { isValid: false, error: `${fieldName} не может быть длиннее 50 символов` };\r\n        }\r\n\r\n        if (!/^[а-яё\\s\\-']+$/i.test(name)) {\r\n            return { isValid: false, error: `${fieldName} должно содержать только русские буквы, пробелы, дефисы и апострофы` };\r\n        }\r\n\r\n        // Проверка на слишком много пробелов подряд\r\n        if (/\\s{2,}/.test(name)) {\r\n            return { isValid: false, error: `${fieldName} не должно содержать несколько пробелов подряд` };\r\n        }\r\n\r\n        // Проверка на пробелы в начале/конце\r\n        if (name !== name.trim()) {\r\n            return { isValid: false, error: `${fieldName} не должно начинаться или заканчиваться пробелом` };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация даты рождения\r\n     */\r\n    validateBirthday(birthday) {\r\n        if (!birthday) {\r\n            return { isValid: true }; // Дата рождения необязательна\r\n        }\r\n\r\n        const birthDate = new Date(birthday);\r\n        const today = new Date();\r\n        const minDate = new Date(today.getFullYear() - 125, today.getMonth(), today.getDate());\r\n\r\n        if (isNaN(birthDate.getTime())) {\r\n            return { isValid: false, error: 'Неверный формат даты' };\r\n        }\r\n\r\n        if (birthDate > today) {\r\n            return { isValid: false, error: 'Дата рождения не может быть в будущем' };\r\n        }\r\n\r\n        if (birthDate < minDate) {\r\n            return { isValid: false, error: 'Дата рождения не может быть более 125 лет назад' };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация номера телефона\r\n     */\r\n    validatePhoneNumber(phone) {\r\n        if (!phone || phone.trim() === '') {\r\n            return { isValid: false, error: 'Номер телефона обязателен для заполнения' };\r\n        }\r\n\r\n        // Убираем все символы кроме цифр и +\r\n        const cleanPhone = phone.replace(/[\\s\\-\\(\\)]/g, '');\r\n\r\n        // Различные форматы российских номеров\r\n        const phonePatterns = [\r\n            /^(\\+7|8)\\d{10}$/,           // +7XXXXXXXXXX или 8XXXXXXXXXX\r\n            /^\\+7\\d{10}$/,               // +7XXXXXXXXXX\r\n            /^8\\d{10}$/,                 // 8XXXXXXXXXX\r\n            /^7\\d{10}$/                  // 7XXXXXXXXXX\r\n        ];\r\n\r\n        let isValidFormat = false;\r\n        for (const pattern of phonePatterns) {\r\n            if (pattern.test(cleanPhone)) {\r\n                isValidFormat = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!isValidFormat) {\r\n            return { isValid: false, error: 'Неверный формат номера телефона. Используйте российский формат' };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация email\r\n     */\r\n    validateEmail(email) {\r\n        if (!email || email.trim() === '') {\r\n            return { isValid: false, error: 'Email обязателен для заполнения' };\r\n        }\r\n\r\n        if (email.length > 100) {\r\n            return { isValid: false, error: 'Email не может быть длиннее 100 символов' };\r\n        }\r\n\r\n        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n        if (!emailRegex.test(email)) {\r\n            return { isValid: false, error: 'Неверный формат email' };\r\n        }\r\n\r\n        // Проверка на запрещенные символы в локальной части\r\n        const localPart = email.split('@')[0];\r\n        if (localPart.startsWith('.') || localPart.endsWith('.') || localPart.includes('..')) {\r\n            return { isValid: false, error: 'Неверный формат email' };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация номера автомобиля\r\n     */\r\n    validateCarNumber(number) {\r\n        if (!number || number.trim() === '') {\r\n            return { isValid: false, error: 'Номер автомобиля обязателен' };\r\n        }\r\n\r\n        const cleanNumber = number.replace(/[\\s\\-]/g, '').toUpperCase();\r\n\r\n        // Проверка длины\r\n        if (cleanNumber.length < 8 || cleanNumber.length > 9) {\r\n            return { isValid: false, error: 'Неверная длина номера (должно быть 8-9 символов)' };\r\n        }\r\n\r\n        // Различные форматы российских номеров\r\n        const patterns = [\r\n            { pattern: /^[АВЕКМНОРСТУХ]\\d{3}[АВЕКМНОРСТУХ]{2}\\d{2,3}$/, type: 'стандартный' },\r\n            { pattern: /^[АВЕКМНОРСТУХ]{2}\\d{3}[АВЕКМНОРСТУХ]\\d{2,3}$/, type: 'такси' },\r\n            { pattern: /^[АВЕКМНОРСТУХ]{2}\\d{4}\\d{2,3}$/, type: 'прицеп' },\r\n            { pattern: /^\\d{4}[АВЕКМНОРСТУХ]{2}\\d{2,3}$/, type: 'мотоцикл' },\r\n            { pattern: /^Т\\d{3}[АВЕКМНОРСТУХ]{2}\\d{2,3}$/, type: 'транзит' }\r\n        ];\r\n\r\n        let isValidFormat = false;\r\n        for (const { pattern } of patterns) {\r\n            if (pattern.test(cleanNumber)) {\r\n                isValidFormat = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!isValidFormat) {\r\n            return { isValid: false, error: 'Неверный формат российского номера' };\r\n        }\r\n\r\n        // Проверка кода региона\r\n        const regionCode = cleanNumber.slice(-3);\r\n        const twoDigitCode = regionCode.slice(-2);\r\n        const threeDigitCode = regionCode;\r\n\r\n        if (!this.validRegionCodes.includes(twoDigitCode) && !this.validRegionCodes.includes(threeDigitCode)) {\r\n            return { isValid: false, error: 'Неверный код региона' };\r\n        }\r\n\r\n        // Проверка на запрещенные комбинации\r\n        for (const forbidden of this.forbiddenCombinations) {\r\n            if (forbidden.test(cleanNumber)) {\r\n                return { isValid: false, error: 'Недопустимая комбинация символов в номере' };\r\n            }\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация марки/модели автомобиля\r\n     */\r\n    validateCarBrand(value, fieldName) {\r\n        if (!value || value.trim() === '') {\r\n            return { isValid: true }; // Необязательное поле\r\n        }\r\n\r\n        if (value.length > 100) {\r\n            return { isValid: false, error: `${fieldName} не может быть длиннее 100 символов` };\r\n        }\r\n\r\n        if (!/^[а-яёa-z0-9\\s\\-._]+$/i.test(value)) {\r\n            return { isValid: false, error: `${fieldName} должна содержать только буквы, цифры, пробелы, дефисы, точки и подчеркивания` };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация цвета автомобиля\r\n     */\r\n    validateCarColor(color) {\r\n        if (!color || color.trim() === '') {\r\n            return { isValid: true }; // Необязательное поле\r\n        }\r\n\r\n        if (color.length > 50) {\r\n            return { isValid: false, error: 'Цвет не может быть длиннее 50 символов' };\r\n        }\r\n\r\n        if (!/^[а-яёa-z\\s\\-]+$/i.test(color)) {\r\n            return { isValid: false, error: 'Цвет должен содержать только буквы, пробелы и дефисы' };\r\n        }\r\n\r\n        return { isValid: true };\r\n    }\r\n\r\n    /**\r\n     * Валидация одного автомобиля\r\n     */\r\n    validateCar(car) {\r\n        const errors = {};\r\n        let isValid = true;\r\n\r\n        // Валидация марки\r\n        const markValidation = this.validateCarBrand(car.mark, 'Марка');\r\n        if (!markValidation.isValid) {\r\n            errors.mark = markValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        // Валидация модели\r\n        const modelValidation = this.validateCarBrand(car.model, 'Модель');\r\n        if (!modelValidation.isValid) {\r\n            errors.model = modelValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        // Валидация цвета\r\n        const colorValidation = this.validateCarColor(car.color);\r\n        if (!colorValidation.isValid) {\r\n            errors.color = colorValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        // Валидация номера\r\n        const numberValidation = this.validateCarNumber(car.number);\r\n        if (!numberValidation.isValid) {\r\n            errors.number = numberValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        return { isValid, errors };\r\n    }\r\n\r\n    /**\r\n     * Проверка уникальности номеров автомобилей\r\n     */\r\n    validateUniqueCarNumbers(cars) {\r\n        const numbers = cars\r\n            .map(car => car.number?.replace(/[\\s\\-]/g, '').toUpperCase())\r\n            .filter(Boolean);\r\n\r\n        const duplicates = [];\r\n        const seen = new Set();\r\n\r\n        numbers.forEach((number, index) => {\r\n            if (seen.has(number)) {\r\n                duplicates.push(index);\r\n            } else {\r\n                seen.add(number);\r\n                // Также добавляем индекс первого вхождения дубликата\r\n                const firstIndex = numbers.indexOf(number);\r\n                if (firstIndex !== index && !duplicates.includes(firstIndex)) {\r\n                    duplicates.push(firstIndex);\r\n                }\r\n            }\r\n        });\r\n\r\n        return duplicates;\r\n    }\r\n\r\n    /**\r\n     * Полная валидация данных пользователя\r\n     */\r\n    validateUserData(userData) {\r\n        const errors = {\r\n            user: {},\r\n            cars: []\r\n        };\r\n        let isValid = true;\r\n\r\n        // Валидация данных пользователя\r\n        const firstNameValidation = this.validateName(userData.firstName, 'Имя', true);\r\n        if (!firstNameValidation.isValid) {\r\n            errors.user.firstName = firstNameValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const lastNameValidation = this.validateName(userData.lastName, 'Фамилия', true);\r\n        if (!lastNameValidation.isValid) {\r\n            errors.user.lastName = lastNameValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const patronymicValidation = this.validateName(userData.patronymic, 'Отчество', false);\r\n        if (!patronymicValidation.isValid) {\r\n            errors.user.patronymic = patronymicValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const birthdayValidation = this.validateBirthday(userData.birthday);\r\n        if (!birthdayValidation.isValid) {\r\n            errors.user.birthday = birthdayValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const phoneValidation = this.validatePhoneNumber(userData.phoneNumber);\r\n        if (!phoneValidation.isValid) {\r\n            errors.user.phoneNumber = phoneValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        const emailValidation = this.validateEmail(userData.email);\r\n        if (!emailValidation.isValid) {\r\n            errors.user.email = emailValidation.error;\r\n            isValid = false;\r\n        }\r\n\r\n        return {\r\n            isValid,\r\n            errors\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Форматирование номера автомобиля\r\n     */\r\n    formatCarNumber(input) {\r\n        let value = input.value.replace(/[^а-яёА-ЯЁ0-9ТтTt]/g, '').toUpperCase();\r\n\r\n        // Заменяем русские буквы на допустимые\r\n        const letterMap = {\r\n            'А': 'А', 'В': 'В', 'Е': 'Е', 'К': 'К', 'М': 'М', 'Н': 'Н',\r\n            'О': 'О', 'Р': 'Р', 'С': 'С', 'Т': 'Т', 'У': 'У', 'Х': 'Х',\r\n            'T': 'Т' // Латинская T заменяется на русскую Т\r\n        };\r\n\r\n        value = value.split('').map(char => letterMap[char] || char).join('');\r\n\r\n        // Ограничиваем длину\r\n        if (value.length > 9) {\r\n            value = value.slice(0, 9);\r\n        }\r\n\r\n        input.value = value;\r\n    }\r\n\r\n    /**\r\n     * Форматирование номера телефона\r\n     */\r\n    formatPhoneNumber(input) {\r\n        let value = input.value.replace(/\\D/g, '');\r\n\r\n        if (value.startsWith('8') && value.length > 1) {\r\n            value = '7' + value.slice(1);\r\n        }\r\n\r\n        if (value.startsWith('7') && value.length <= 11) {\r\n            const formatted = value.replace(/^7(\\d{3})(\\d{3})(\\d{2})(\\d{2})/, '+7 ($1) $2-$3-$4');\r\n            input.value = formatted;\r\n        } else if (value.length <= 10) {\r\n            const formatted = value.replace(/^(\\d{3})(\\d{3})(\\d{2})(\\d{2})/, '+7 ($1) $2-$3-$4');\r\n            input.value = formatted;\r\n        }\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./wwwroot/js/UserValidator.js\");\n__webpack_require__(\"./wwwroot/js/UserProfile.js\");\n__webpack_require__(\"./wwwroot/js/Modal.js\");\n__webpack_require__(\"./wwwroot/js/AuthManager.js\");\n__webpack_require__(\"./wwwroot/js/ApartmentStatuses.js\");\n__webpack_require__(\"./wwwroot/js/ApartmentProfile.js\");\n__webpack_require__(\"./wwwroot/js/ApartmentHouses.js\");\n__webpack_require__(\"./wwwroot/css/variables.css\");\n__webpack_require__(\"./wwwroot/css/profile-group.css\");\n__webpack_require__(\"./wwwroot/css/notification.css\");\n__webpack_require__(\"./wwwroot/css/modal.css\");\n__webpack_require__(\"./wwwroot/css/main.css\");\n__webpack_require__(\"./wwwroot/css/house-and-apartments.css\");\n__webpack_require__(\"./wwwroot/css/grid.css\");\n__webpack_require__(\"./wwwroot/css/card.css\");\nvar __webpack_exports__ = __webpack_require__(\"./wwwroot/css/btn.css\");\n",""],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_toPrimitive","_typeof","toPrimitive","String","Number","ApartmentHouses","ApartmentAPIAddress","_InsertHouseData","_callee2","userId","housesListClass","template","_this","_t","_context2","GetHousesByUserId","houses","console","log","housesListContainer","document","querySelector","innerHTML","forEach","_ref","_callee","house","headOfHOuse","headTemplate","managementCompanyTemplate","houseTemplate","_context","GetHead","id","insertAdjacentHTML","_x4","error","InsertHouseData","_x","_x2","_x3","company","companyHTML","head","headHTML","concat","firstName","patronymic","phoneNumber","MainPageHouseTemplate","houseHTML","city","street","number","HousesListHouseTemplate","isApartmentBuilding","floors","entrances","hasGas","hasElectricity","builtYear","totalArea","apartmentsArea","landArea","_GetHouses","_callee3","response","data","_t2","_context3","fetch","method","headers","json","ok","Error","GetHouses","_GetHouse","_callee4","_t3","_context4","GetHouse","_x5","_CreateHouse","_callee5","houseData","_t4","_context5","body","JSON","stringify","CreateHouse","_x6","_UpdateHouse","_callee6","_t5","_context6","text","UpdateHouse","_x7","_x8","_DeleteHouse","_callee7","_t6","_t7","_t8","_context7","DeleteHouse","_x9","_AssignHead","_callee8","houseId","_t9","_context8","AssignHead","_x0","_x1","_RevokeHead","_callee9","_t0","_context9","RevokeHead","_x10","_GetHead","_callee0","isJson","errorMessage","_t1","_context0","parse","message","Message","status","_x11","_GetHousesByUserId","_callee1","_t10","_context1","_x12","addEventListener","_event$detail","event","detail","isAuthenticated","userData","houseProfile","window","authManager","location","pathname","includes","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","s","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","ApartmentStatuses","ApartmentProfile","House","_InsertApartmentDataToCardOnMainPage","apartments","apartmentsListContainer","_iterator","_step","apartment","apartmentTemplate","GetApartmentsByUserId","SetApartmentTemplate","InsertApartmentDataToCardOnMainPage","apartmentHTML","apartmentNumber","numbersOfRooms","residentialArea","_GetApartmentsByUserId","_GetApartmentsByUserPhone","phone","GetApartmentsByUserPhone","_GetApartment","GetApartment","_CreateApartment","apartmentData","CreateApartment","_DeleteApartment","DeleteApartment","_AddUserToApartment","apartmentId","AddUserToApartment","_RemoveUserFromApartment","RemoveUserFromApartment","_UpdateUserShare","share","UpdateUserShare","_GetApartmentShares","_t11","GetApartmentShares","_GetApartmentStatistics","_t12","GetApartmentStatistics","_x13","apartmentProfile","_GetStatuses","errorText","GetStatuses","_GetStatus","GetStatus","_CreateStatus","contentType","errorData","get","CreateStatus","_UpdateStatus","newName","UpdateStatus","_DeleteStatus","_errorText","DeleteStatus","_AssignStatusToUser","statusId","successMessage","AssignStatusToUser","_RevokeStatusFromUser","RevokeStatusFromUser","_GetUserStatusesForApartment","GetUserStatusesForApartment","AuthManager","tokenKey","userDataKey","authApiUrl","initialize","_initialize","urlParams","authCode","URLSearchParams","search","exchangeAuthCode","clearAuthCodeFromUrl","checkStoredToken","_exchangeAuthCode","result","setAuthData","token","email","showNotification","warn","clearAuthData","_checkStoredToken","localStorage","getItem","setItem","cookie","updateUI","removeItem","_logout","identityServerUrl","protocol","hostname","href","logout","getAuthToken","getAuthHeaders","authElements","querySelectorAll","guestElements","element","style","display","userEmailElements","textContent","loginButtons","logoutButtons","btn","onclick","authEvent","CustomEvent","dispatchEvent","url","URL","searchParams","history","replaceState","type","undefined","notification","createElement","className","cssText","appendChild","setTimeout","remove","getCurrentUser","Modal","OpenModal","CloseModal","CloseModalOnOutsideClick","modalCall","classList","add","cross","closest","modalOverview","target","contains","ShowNotification","color","backgroundColor","parentNode","removeChild","UserValidator","UserProfile","userApiAddress","validator","_GetUserById","GetUserById","_GetCarsByUserId","GetCarsByUserId","_InsertUserDataToCardOnMainPage","userIdLinks","link","user","fullName","carsCount","lastName","cars","car","mark","model","InsertUserDataToCardOnMainPage","_InsertCarsToUserProfile","carsContainer","SetUserCar","InsertCarsToUserProfile","_InsertUserDataToProfile","setValue","getElementById","date","Date","year","getFullYear","month","getMonth","padStart","day","getDate","birthday","InsertUserDataToProfile","SetCarTemplate","buttonDelCar","disabledOrNot","keys","carTemplate","carsList","CollectUserDataFromProfile","userProfileInputs","input","inputKey","inputValue","setHours","toISOString","CollectCarsDataFromProfile","carsData","_car$querySelector","_car$querySelector2","_car$querySelector3","_car$querySelector4","carData","dataset","carId","push","CollectCarsDataFromModal","_car$querySelector5","_car$querySelector6","_car$querySelector7","_car$querySelector8","ShowValidationErrors","errors","field","errorElement","carErrors","index","_UpdateUserToDB","validation","carsValidation","allErrors","validateUserData","ValidateCarsData","isValid","_objectSpread","UpdateUserToDB","_this2","carValidation","validateCar","duplicateIndices","validateUniqueCarNumbers","ValidateCarInModal","_AddCarToUser","AddCarToUser","_RemoveCarFromUser","_t13","_t14","_t15","RemoveCarFromUser","userProfile","action","allowedLetters","validRegionCodes","forbiddenCombinations","validateName","fieldName","required","trim","validateBirthday","birthDate","today","minDate","isNaN","getTime","validatePhoneNumber","cleanPhone","replace","phonePatterns","isValidFormat","_i","_phonePatterns","pattern","validateEmail","emailRegex","localPart","split","startsWith","endsWith","validateCarNumber","cleanNumber","toUpperCase","patterns","_i2","_patterns","regionCode","twoDigitCode","threeDigitCode","forbidden","err","validateCarBrand","validateCarColor","markValidation","modelValidation","colorValidation","numberValidation","numbers","map","_car$number","filter","Boolean","duplicates","seen","Set","has","firstIndex","indexOf","firstNameValidation","lastNameValidation","patronymicValidation","birthdayValidation","phoneValidation","emailValidation","formatCarNumber","letterMap","char","join","formatPhoneNumber","formatted"],"sourceRoot":""}