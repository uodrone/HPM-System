@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HPM System - Главная</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: white;
        }

        .nav-menu {
            display: flex;
            gap: 2rem;
            align-items: center;
        }

        .nav-link {
            color: white;
            text-decoration: none;
            font-weight: 500;
            transition: opacity 0.3s;
        }

            .nav-link:hover {
                opacity: 0.8;
            }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-info {
            color: white;
            font-size: 0.9rem;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s;
        }

        .btn-primary {
            background-color: #3B82F6;
            color: white;
        }

            .btn-primary:hover {
                background-color: #2563EB;
            }

        .btn-secondary {
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

            .btn-secondary:hover {
                background-color: rgba(255, 255, 255, 0.3);
            }

        .btn-danger {
            background-color: #EF4444;
            color: white;
        }

            .btn-danger:hover {
                background-color: #DC2626;
            }

        .main-content {
            padding: 4rem 0;
        }

        .hero {
            text-align: center;
            color: white;
            margin-bottom: 4rem;
        }

            .hero h1 {
                font-size: 3rem;
                margin-bottom: 1rem;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }

            .hero p {
                font-size: 1.2rem;
                opacity: 0.9;
                max-width: 600px;
                margin: 0 auto 2rem;
            }

        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 3rem;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 12px;
            text-align: center;
            color: white;
            transition: transform 0.3s;
        }

            .feature-card:hover {
                transform: translateY(-5px);
            }

        .feature-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .welcome-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 12px;
            color: white;
            text-align: center;
            margin-bottom: 2rem;
        }

        .auth-required {
            display: none;
        }

        .guest-only {
            display: block;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
        }

        .dashboard-preview {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 12px;
            color: white;
            margin-top: 2rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
            border-radius: 8px;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        @@media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 1rem;
        }

        .hero h1 {
            font-size: 2rem;
        }

        .nav-menu {
            flex-wrap: wrap;
            justify-content: center;
        }

        }
    </style>
</head>
<body>
    <!-- Заголовок -->
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">HPM System</div>

                <nav class="nav-menu">
                    <!-- Элементы для авторизованных пользователей -->
                    <div data-auth-required class="auth-required">
                        <a href="/dashboard" class="nav-link">Панель управления</a>
                        <a href="/apartments" class="nav-link">Квартиры</a>
                        <a href="/notifications" class="nav-link">Уведомления</a>
                    </div>

                    <!-- Информация о пользователе и кнопки управления -->
                    <div class="user-menu">
                        <!-- Для авторизованных -->
                        <div data-auth-required class="auth-required user-info">
                            Привет, <span data-user-email>пользователь</span>!
                        </div>

                        <button data-logout-btn class="btn btn-danger auth-required" style="display: none;">
                            Выйти
                        </button>

                        <!-- Для неавторизованных -->
                        <button data-login-btn class="btn btn-primary guest-only" onclick="redirectToLogin()">
                            Войти
                        </button>
                    </div>
                </nav>
            </div>
        </div>
    </header>

    <!-- Основной контент -->
    <main class="main-content">
        <div class="container">
            <!-- Приветствие для авторизованных пользователей -->
            <div data-auth-required class="auth-required">
                <div class="welcome-section">
                    <h2>Добро пожаловать в HPM System!</h2>
                    <p>Рады видеть вас снова, <strong data-user-email>пользователь</strong></p>
                    <p>ID пользователя: <code data-user-id>не определен</code></p>
                </div>

                <div class="dashboard-preview">
                    <h3>Краткий обзор</h3>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-number">12</div>
                            <div>Квартир</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number">3</div>
                            <div>Новых уведомлений</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number">8</div>
                            <div>Активных заявок</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number">€ 2,450</div>
                            <div>Месячный доход</div>
                        </div>
                    </div>
                </div>

                <div class="features">
                    <div class="feature-card">
                        <div class="feature-icon">🏠</div>
                        <h3>Управление квартирами</h3>
                        <p>Полный контроль над вашей недвижимостью</p>
                        <a href="/apartments" class="btn btn-secondary" style="margin-top: 1rem;">Перейти</a>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">👥</div>
                        <h3>Управление арендаторами</h3>
                        <p>Ведите учет арендаторов и договоров</p>
                        <a href="/tenants" class="btn btn-secondary" style="margin-top: 1rem;">Перейти</a>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">📊</div>
                        <h3>Аналитика и отчеты</h3>
                        <p>Детальные отчеты о доходах и расходах</p>
                        <a href="/analytics" class="btn btn-secondary" style="margin-top: 1rem;">Перейти</a>
                    </div>
                </div>
            </div>

            <!-- Контент для неавторизованных пользователей -->
            <div data-guest-only class="guest-only">
                <div class="hero">
                    <h1>Добро пожаловать в HPM System</h1>
                    <p>Современная система управления недвижимостью. Контролируйте свои квартиры, арендаторов и финансы в одном месте.</p>
                    <button class="btn btn-primary" onclick="redirectToLogin()" style="font-size: 1.1rem; padding: 12px 24px;">
                        Войти в систему
                    </button>
                </div>

                <div class="features">
                    <div class="feature-card">
                        <div class="feature-icon">🏢</div>
                        <h3>Управление портфелем</h3>
                        <p>Централизованное управление всей вашей недвижимостью</p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">💰</div>
                        <h3>Финансовый учет</h3>
                        <p>Отслеживание доходов, расходов и рентабельности</p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">📱</div>
                        <h3>Мобильный доступ</h3>
                        <p>Управляйте недвижимостью где угодно и когда угодно</p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">🔔</div>
                        <h3>Уведомления</h3>
                        <p>Будьте в курсе всех важных событий и платежей</p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">📋</div>
                        <h3>Документооборот</h3>
                        <p>Электронные договоры и автоматическая отчетность</p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">🛡️</div>
                        <h3>Безопасность</h3>
                        <p>Надежная защита ваших данных и конфиденциальности</p>
                    </div>
                </div>

                <div style="text-align: center; margin-top: 3rem;">
                    <div class="feature-card" style="max-width: 500px; margin: 0 auto;">
                        <h3>Начните использовать HPM System</h3>
                        <p style="margin-bottom: 2rem;">Зарегистрируйтесь сейчас и получите доступ ко всем возможностям системы</p>
                        <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
                            <button class="btn btn-primary" onclick="redirectToLogin()">Войти</button>
                            <button class="btn btn-secondary" onclick="redirectToRegister()">Регистрация</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Скрипт для обработки аутентификации -->
    <script>
        // AuthManager класс (встроенная версия)
        class AuthManager {
            constructor() {
                this.tokenKey = 'hpm_auth_token';
                this.userDataKey = 'hpm_user_data';
                this.authApiUrl = '/api/auth';
                this.isAuthenticated = false;
                this.userData = null;

                this.initialize();
            }

            async initialize() {
                const urlParams = new URLSearchParams(window.location.search);
                const authCode = urlParams.get('auth');

                if (authCode) {
                    console.log('Найден код аутентификации в URL');
                    await this.exchangeAuthCode(authCode);
                    this.clearAuthCodeFromUrl();
                } else {
                    await this.checkStoredToken();
                }

                this.updateUI();
            }

            async exchangeAuthCode(authCode) {
                try {
                    const response = await fetch(`${this.authApiUrl}/exchange-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ authCode: authCode })
                    });

                    const result = await response.json();

                    if (response.ok && result.isAuthenticated) {
                        this.setAuthData(result.token, {
                            userId: result.userId,
                            email: result.email,
                            phoneNumber: result.phoneNumber
                        });
                        console.log('✅ Авторизация успешна');
                        this.showNotification('Добро пожаловать!', 'success');
                    } else {
                        console.warn('❌ Ошибка при обмене кода аутентификации:', result.message);
                        this.clearAuthData();
                        this.showNotification(result.message || 'Ошибка авторизации', 'error');
                    }
                } catch (error) {
                    console.error('❌ Ошибка при обмене кода аутентификации:', error);
                    this.clearAuthData();
                    this.showNotification('Произошла ошибка при авторизации', 'error');
                }
            }

            async checkStoredToken() {
                const token = localStorage.getItem(this.tokenKey);

                if (!token) {
                    this.clearAuthData();
                    return;
                }

                try {
                    const response = await fetch(`${this.authApiUrl}/validate-token`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ token: token })
                    });

                    const result = await response.json();

                    if (response.ok && result.isAuthenticated) {
                        this.setAuthData(token, {
                            userId: result.userId,
                            email: result.email,
                            phoneNumber: result.phoneNumber
                        });
                        console.log('✅ Токен валиден, пользователь авторизован');
                    } else {
                        console.log('❌ Токен невалиден, очищаем данные');
                        this.clearAuthData();
                    }
                } catch (error) {
                    console.error('❌ Ошибка при проверке токена:', error);
                    this.clearAuthData();
                }
            }

            setAuthData(token, userData) {
                this.isAuthenticated = true;
                this.userData = userData;

                localStorage.setItem(this.tokenKey, token);
                localStorage.setItem(this.userDataKey, JSON.stringify(userData));

                document.cookie = `auth_token=${token}; path=/; max-age=3600; samesite=strict`;

                this.updateUI();
            }

            clearAuthData() {
                this.isAuthenticated = false;
                this.userData = null;

                localStorage.removeItem(this.tokenKey);
                localStorage.removeItem(this.userDataKey);

                document.cookie = 'auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';

                this.updateUI();
            }

            async logout() {
                this.clearAuthData();
                this.showNotification('Вы вышли из системы', 'info');

                // Перенаправляем на страницу входа IdentityServer
                const identityServerUrl = window.location.protocol + '//' + window.location.hostname + ':55674';
                window.location.href = `${identityServerUrl}/Auth/Login`;
            }

            getAuthToken() {
                return localStorage.getItem(this.tokenKey);
            }

            getAuthHeaders() {
                const token = this.getAuthToken();
                return token ? { 'Authorization': `Bearer ${token}` } : {};
            }

            updateUI() {
                // Показываем/скрываем элементы
                const authElements = document.querySelectorAll('[data-auth-required]');
                const guestElements = document.querySelectorAll('[data-guest-only]');

                authElements.forEach(element => {
                    element.style.display = this.isAuthenticated ? 'block' : 'none';
                });

                guestElements.forEach(element => {
                    element.style.display = this.isAuthenticated ? 'none' : 'block';
                });

                // Обновляем информацию о пользователе
                if (this.isAuthenticated && this.userData) {
                    const userEmailElements = document.querySelectorAll('[data-user-email]');
                    const userIdElements = document.querySelectorAll('[data-user-id]');

                    userEmailElements.forEach(element => {
                        element.textContent = this.userData.email;
                    });

                    userIdElements.forEach(element => {
                        element.textContent = this.userData.userId;
                    });
                }

                // Обновляем кнопки
                const loginButtons = document.querySelectorAll('[data-login-btn]');
                const logoutButtons = document.querySelectorAll('[data-logout-btn]');

                loginButtons.forEach(btn => {
                    btn.style.display = this.isAuthenticated ? 'none' : 'inline-block';
                });

                logoutButtons.forEach(btn => {
                    btn.style.display = this.isAuthenticated ? 'inline-block' : 'none';
                    btn.onclick = () => this.logout();
                });

                // Генерируем событие изменения состояния авторизации
                const authEvent = new CustomEvent('authStateChanged', {
                    detail: {
                        isAuthenticated: this.isAuthenticated,
                        userData: this.userData
                    }
                });
                document.dispatchEvent(authEvent);
            }

            clearAuthCodeFromUrl() {
                const url = new URL(window.location);
                url.searchParams.delete('auth');
                window.history.replaceState(null, '', url);
            }

            showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `notification notification-${type}`;
                notification.textContent = message;

                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 12px 20px;
                    border-radius: 6px;
                    color: white;
                    z-index: 10000;
                    font-weight: 500;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    cursor: pointer;
                    transition: opacity 0.3s;
                    ${type === 'success' ? 'background-color: #10B981;' : ''}
                    ${type === 'error' ? 'background-color: #EF4444;' : ''}
                    ${type === 'info' ? 'background-color: #3B82F6;' : ''}
                `;

                document.body.appendChild(notification);

                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 5000);

                notification.onclick = () => notification.remove();
            }

            redirectToLogin() {
                const identityServerUrl = window.location.protocol + '//' + window.location.hostname + ':55674';
                const returnUrl = encodeURIComponent(window.location.href);
                window.location.href = `${identityServerUrl}/Auth/Login?returnUrl=${returnUrl}`;
            }
        }

        // Инициализируем глобальный менеджер аутентификации
        window.authManager = new AuthManager();

        // Глобальные функции
        window.isAuthenticated = () => window.authManager.isAuthenticated;
        window.getCurrentUser = () => window.authManager.userData;
        window.logout = () => window.authManager.logout();
        window.redirectToLogin = () => window.authManager.redirectToLogin();
        window.redirectToRegister = () => {
            const identityServerUrl = window.location.protocol + '//' + window.location.hostname + ':55674';
            const returnUrl = encodeURIComponent(window.location.href);
            window.location.href = `${identityServerUrl}/Auth/Register?returnUrl=${returnUrl}`;
        };

        // Пример использования: слушаем изменения состояния авторизации
        document.addEventListener('authStateChanged', (event) => {
            console.log('Состояние авторизации изменилось:', event.detail);

            // Здесь можно добавить дополнительную логику
            if (event.detail.isAuthenticated) {
                console.log('Пользователь авторизован:', event.detail.userData);
                // Можно загрузить дополнительные данные пользователя
                loadUserSpecificData();
            } else {
                console.log('Пользователь не авторизован');
            }
        });

        // Функция для загрузки данных пользователя
        async function loadUserSpecificData() {
            if (!window.authManager.isAuthenticated) {
                return;
            }

            try {
                const headers = window.authManager.getAuthHeaders();

                // Пример загрузки статистики пользователя
                const response = await fetch('/api/dashboard/stats', {
                    headers: {
                        ...headers,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const stats = await response.json();
                    updateDashboardStats(stats);
                }
            } catch (error) {
                console.error('Ошибка при загрузке данных пользователя:', error);
            }
        }

        // Функция для обновления статистики на странице
        function updateDashboardStats(stats) {
            // Обновляем цифры в статистических карточках
            const statCards = document.querySelectorAll('.stat-card');
            if (stats && statCards.length >= 4) {
                statCards[0].querySelector('.stat-number').textContent = stats.apartmentsCount || '0';
                statCards[1].querySelector('.stat-number').textContent = stats.notificationsCount || '0';
                statCards[2].querySelector('.stat-number').textContent = stats.activeRequestsCount || '0';
                statCards[3].querySelector('.stat-number').textContent = stats.monthlyIncome || '€ 0';
            }
        }

        // Функция для выполнения авторизованных запросов
        async function makeAuthenticatedRequest(url, options = {}) {
            if (!window.authManager.isAuthenticated) {
                window.authManager.redirectToLogin();
                return null;
            }

            const headers = {
                ...window.authManager.getAuthHeaders(),
                'Content-Type': 'application/json',
                ...options.headers
            };

            try {
                const response = await fetch(url, {
                    ...options,
                    headers
                });

                // Если получили 401, токен истек
                if (response.status === 401) {
                    window.authManager.clearAuthData();
                    window.authManager.showNotification('Сессия истекла, необходимо войти заново', 'error');
                    setTimeout(() => {
                        window.authManager.redirectToLogin();
                    }, 2000);
                    return null;
                }

                return response;
            } catch (error) {
                console.error('Ошибка при выполнении авторизованного запроса:', error);
                throw error;
            }
        }

        // Экспортируем функцию для использования в других скриптах
        window.makeAuthenticatedRequest = makeAuthenticatedRequest;
    </script>
</body>
</html>